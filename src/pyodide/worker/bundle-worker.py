#!/usr/bin/env python3
"""
Bundle Pyodide Worker Modules

This script combines all the worker modules into a single file that can be used
as a blob worker without ES6 import issues.

Usage: python bundle-worker.py
Output: worker-bundled.js
"""

from pathlib import Path


def process_module_content(content, filename, seen_functions):
    """Process module content to remove imports/exports and handle duplicates"""
    lines = content.split("\n")
    processed_lines = []
    in_export_block = False
    current_function = None

    for line in lines:
        stripped = line.strip()

        # Skip import statements
        if stripped.startswith("import ") and "{" in stripped and "}" in stripped:
            continue
        elif stripped.startswith("import ") and "from" in stripped:
            continue
        elif stripped.startswith("import "):
            continue

        # Handle export statements
        if stripped.startswith("export {"):
            in_export_block = True
            continue
        elif in_export_block and stripped.endswith("};"):
            in_export_block = False
            continue
        elif in_export_block:
            continue
        elif stripped.startswith("export "):
            # Remove 'export ' prefix but keep the rest
            line = line.replace("export ", "")
            stripped = line.strip()

        # Check for function declarations and const assignments
        if (
            stripped.startswith("function ")
            or stripped.startswith("async function ")
            or (
                stripped.startswith("const ")
                and "=" in stripped
                and ("function" in stripped or "=>" in stripped)
            )
        ):
            # Extract function name
            if stripped.startswith("function ") or stripped.startswith("async function "):
                func_name = stripped.split("(")[0].split()[-1]
            elif stripped.startswith("const "):
                func_name = stripped.split("=")[0].replace("const", "").strip()

            # Skip if we've already seen this function
            if func_name in seen_functions:
                print(f"    ‚ö†Ô∏è  Skipping duplicate function: {func_name}")
                continue
            else:
                seen_functions.add(func_name)
                current_function = func_name

        processed_lines.append(line)

    return "\n".join(processed_lines)


def read_file(filepath):
    """Read a file and return its content"""
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        print(f"Warning: {filepath} not found")
        return ""


def main():
    # Define the bundling order (dependencies first)
    files_to_bundle = [
        "worker-config.js",  # No dependencies
        "worker-execution.js",  # Depends on config
        "worker-fs.js",  # Depends on config
        "worker-input.js",  # Depends on config
        "worker-handlers.js",  # Depends on all above
        "worker.js",  # Main entry point
    ]

    print("üîß Bundling Pyodide Worker modules...")

    bundled_content = []
    seen_functions = set()

    # Add header
    bundled_content.append("""/**
 * Pyodide Worker - Bundled Version
 * 
 * This file contains all worker modules bundled into a single file
 * to avoid ES6 import issues in blob workers.
 * 
 * Generated by bundle-worker.py
 */

// =============================================================================
// BUNDLED WORKER - ALL MODULES COMBINED
// =============================================================================

(function() {
    "use strict";
    
    // Global worker state - shared across all modules
    const workerState = {
        pyodide: null,
        isInitialized: false,
        packagesLoaded: new Set()
    };
""")

    # Process each file
    for filename in files_to_bundle:
        filepath = Path(filename)

        if not filepath.exists():
            print(f"Warning: {filename} not found, skipping...")
            continue

        print(f"  üìÅ Processing {filename}...")

        content = read_file(filename)
        if not content:
            continue

        # Process the module content
        processed_content = process_module_content(content, filename, seen_functions)

        # Add file separator
        bundled_content.append(f"\n    // ============= {filename} =============\n")
        bundled_content.append(processed_content)

    # Add footer to close the IIFE
    bundled_content.append("""
})();
""")

    # Write bundled file
    output_file = "worker-bundled.js"
    final_content = "\n".join(bundled_content)

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(final_content)

    print(f"‚úÖ Bundled worker created: {output_file}")
    print(f"üìä Size: {len(final_content)} characters")
    print(f"üìã Functions bundled: {len(seen_functions)}")

    # Basic syntax check
    if "function" in final_content and "const" in final_content:
        print("‚úÖ Basic syntax check passed")
    else:
        print("‚ö†Ô∏è  Warning: Basic syntax check failed")


if __name__ == "__main__":
    main()
