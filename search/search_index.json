{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nagini","text":"<p>Python in the Browser via Pyodide WebAssembly</p> <p>[!IMPORTANT] Production Usage &amp; Branching</p> <ul> <li>Production: For production environments, always use a specific tagged version to ensure stability.</li> <li>Branches:</li> <li><code>main</code>: The main development branch. It is not guaranteed to be stable or correspond to a specific tagged release.</li> <li><code>main-dev</code>: A development branch for experimental features.</li> </ul> <p>Do not use the <code>main</code> branch for production deployments.</p> <p>A production-ready Python execution system for web applications featuring worker-based architecture, interactive input handling, matplotlib visualization, and remote module loading. Perfect for data analysis tools, educational platforms, scientific computing applications, and interactive development environments.</p> <p> </p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Core Features</li> <li>Quick Start</li> <li>Interactive Input</li> <li>Matplotlib Visualization</li> <li>Remote Module Loading</li> <li>Architecture</li> <li>API Reference</li> <li>Xterm Terminal Integration</li> <li>File Structure</li> <li>Testing</li> <li>Dependencies</li> <li>Performance</li> <li>Licensing</li> </ul>"},{"location":"#core-features","title":"Core Features","text":"<ul> <li>\ud83d\ude80 Worker Architecture - Python execution isolated in web workers (Pyodide) or main thread (Brython)</li> <li>\ud83d\udd27 Automatic Blob Workers - Cross-origin compatibility for Pyodide (Flask, Django, etc.)</li> <li>\ud83d\udce6 Micropip Support - Install packages from PyPI using micropip (Pyodide only)</li> <li>\ud83c\udfae Interactive Input - Natural <code>input()</code> support with queue/callbacks (Pyodide only)</li> <li>\ud83d\udcca Matplotlib Integration - Automatic figure capture as base64 images (Pyodide only)</li> <li>\ud83d\udd17 Remote Module Loading - Load Python modules from URLs with retry logic (Pyodide only)</li> <li>\ud83c\udfaf Namespace Isolation - Complete execution isolation between runs</li> <li>\ud83d\udcac Structured Data Exchange - \"Missive\" system for Python \u2194 JavaScript communication</li> <li>\ud83d\udcc1 Filesystem Access - Complete file operations (Pyodide only)</li> <li>\ud83c\udfa8 Dual Backend Support - Pyodide (full-featured) &amp; Brython (lightweight, instant startup)</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#pyodide-backend-recommended-automatic-blob-workers","title":"Pyodide Backend (Recommended) - Automatic Blob Workers","text":"<pre><code>import { Nagini } from './src/nagini.js';\n\n// 1. Create manager with Pyodide (requires bundled worker for cross-origin compatibility)\nconst manager = await Nagini.createManager(\n    'pyodide',                                                    // Backend\n    [\"sympy\", \"matplotlib\"],                                      // Python packages\n    [\"antlr4-python3-runtime\"],                                   // Micropip packages\n    [],                                                           // Files to load (URL objects)\n    \"http://127.0.0.1:8010/src/pyodide/worker/worker-dist.js\"    // Bundled worker\n);\n\n// 2. Wait for initialization\nawait Nagini.waitForReady(manager);\n\n// 3. Execute Python code\nconst result = await manager.executeAsync(\"demo.py\", `\nimport sympy as sp\nx = sp.Symbol('x')\nequation = x**2 - 4\nsolutions = sp.solve(equation, x)\nprint(f\"Solutions: {solutions}\")\nmissive({\"solutions\": [str(s) for s in solutions]})\n`);\n\nconsole.log(result.stdout);   // \"Solutions: [-2, 2]\"\nconsole.log(result.missive);  // {\"solutions\": [\"-2\", \"2\"]}\n</code></pre>"},{"location":"#brython-backend-lightweight-no-workers-needed","title":"Brython Backend (Lightweight) - No Workers Needed","text":"<pre><code>// Brython runs directly in main thread - no blob workers required\nconst manager = await Nagini.createManager(\n    'brython',      // Backend - no worker requirements\n    [],             // Packages ignored (uses Brython stdlib only)\n    [],             // Files ignored\n    '',             // Init path ignored\n    ''              // Worker path ignored\n);\n\nawait Nagini.waitForReady(manager);\n\n// Execute Python code (transpiled to JavaScript)\nconst result = await manager.executeAsync(\"turtle_demo.py\", `\nimport turtle\nt = turtle.Turtle()\nfor _ in range(4):\n    t.forward(100)\n    t.left(90)\nprint(\"Square drawn!\")\n`);\n</code></pre>"},{"location":"#worker-bundling-for-pyodide-cross-origin-use","title":"Worker Bundling for Pyodide Cross-Origin Use","text":"<p>\u26a0\ufe0f Pyodide Only: When using the Pyodide backend with Flask apps or other cross-origin scenarios, bundled workers are mandatory to avoid ES6 import issues. Brython doesn't use workers and is unaffected.</p> <p>\ud83d\udd27 Automatic: Nagini automatically creates blob workers from bundled files for maximum compatibility.</p>"},{"location":"#quick-usage-pyodide-with-bundled-worker","title":"Quick Usage (Pyodide with Bundled Worker)","text":"<pre><code>// For Pyodide in Flask/cross-origin apps - bundled worker is automatically converted to blob\nconst manager = await Nagini.createManager(\n    'pyodide',  // Only Pyodide requires bundled workers\n    [\"numpy\", \"matplotlib\"],\n    [\"antlr4-python3-runtime\"],\n    [],\n    \"http://127.0.0.1:8010/src/pyodide/worker/worker-dist.js\"   // Nagini auto-creates blob worker\n);\n</code></pre>"},{"location":"#quick-usage-brython-no-workers","title":"Quick Usage (Brython - No Workers)","text":"<pre><code>// Brython runs in main thread - no worker bundling needed\nconst manager = await Nagini.createManager(\n    'brython',  // No worker requirements for Brython\n    [],         // Only Brython stdlib available\n    [],\n    '',         // Ignored for Brython\n    ''          // Ignored for Brython\n);\n</code></pre>"},{"location":"#blob-worker-creation-flask-example","title":"Blob Worker Creation (Flask Example)","text":"<pre><code>// Create blob worker URL to avoid CORS issues\nasync function createBlobWorkerUrl(workerPath) {\n    const response = await fetch(workerPath);\n    const workerCode = await response.text();\n    const blob = new Blob([workerCode], { type: 'application/javascript' });\n    return URL.createObjectURL(blob);\n}\n\n// Use in Flask app\nconst workerPath = \"http://127.0.0.1:8010/src/pyodide/worker/worker-dist.js\";\nconst blobWorkerUrl = await createBlobWorkerUrl(workerPath);\n\nconst manager = await Nagini.createManager(\n    'pyodide',\n    [\"numpy\"],\n    [], // No micropip packages in this example\n    [],\n    blobWorkerUrl  // Blob URL works across origins\n);\n</code></pre>"},{"location":"#building-the-pyodide-worker-bundle","title":"Building the Pyodide Worker Bundle","text":"<p>\u26a0\ufe0f Only required for Pyodide backend - Brython doesn't use workers.</p> <pre><code># Navigate to Pyodide worker directory\ncd src/pyodide/worker\n\n# Install dependencies (first time only)\nnpm install\n\n# Build production bundle for Pyodide\nnpm run build\n\n# Build development bundle (with source maps)\nnpm run build-dev\n</code></pre> <p>Output: Creates <code>worker-dist.js</code> (64KB bundled file) that Nagini automatically converts to blob workers for cross-origin compatibility.</p>"},{"location":"#interactive-input","title":"Interactive Input","text":"<p>Nagini provides robust, asynchronous support for Python's built-in <code>input()</code> function, allowing for both programmatic and user-driven interaction without blocking the main browser thread.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>Code Transformation: Code containing <code>input()</code> is automatically converted to an <code>async</code> function.</li> <li>Pause and Wait: The Python worker pauses execution and sends an <code>input_required</code> message to the main thread.</li> <li>Data Provision: The main thread provides the input from a queue or a user-facing callback.</li> <li>Resume: The worker receives the input and resumes Python execution.</li> </ol>"},{"location":"#programmatic-input","title":"Programmatic Input","text":"<pre><code>// Queue inputs programmatically\nmanager.queueInput(\"Alice\");\nmanager.queueInput(\"25\");\n\nconst result = await manager.executeAsync(\"survey.py\", `\nname = input(\"What's your name? \")\nage = int(input(\"How old are you? \"))\nprint(f\"Hello {name}! You are {age} years old.\")\n`);\n</code></pre>"},{"location":"#interactive-callbacks","title":"Interactive Callbacks","text":"<pre><code>// Or use interactive callbacks\nmanager.setInputCallback(async (prompt) =&gt; {\n    const input = window.prompt(prompt);\n    manager.provideInput(input);\n});\n</code></pre>"},{"location":"#matplotlib-visualization","title":"Matplotlib Visualization","text":"<pre><code>const result = await manager.executeAsync(\"plot.py\", `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nplt.plot(x, y)\nplt.title(\"Sine Wave\")\nprint(\"Plot created!\")\n`);\n\n// Access captured figures\nresult.figures.forEach((base64, i) =&gt; {\n    const img = document.createElement('img');\n    img.src = `data:image/png;base64,${base64}`;\n    document.body.appendChild(img);\n});\n</code></pre>"},{"location":"#remote-module-loading","title":"Remote Module Loading","text":"<pre><code>const filesToLoad = [\n    {\n        url: \"https://example.com/modules/math_utils.py\",\n        path: \"utils/math_utils.py\"\n    }\n];\n\nconst manager = await Nagini.createManager(\n    'pyodide',\n    [\"numpy\"],\n    [], // No micropip packages\n    filesToLoad,  // Load from URLs\n    \"./src/pyodide/worker/worker-dist.js\"\n);\n\nawait Nagini.waitForReady(manager);\n\n// Use loaded modules\nconst result = await manager.executeAsync(\"test.py\", `\nfrom utils.math_utils import calculate_fibonacci\nresult = calculate_fibonacci(10)\nprint(f\"Fibonacci(10) = {result}\")\n`);\n</code></pre>"},{"location":"#xterm-terminal-integration","title":"Xterm Terminal Integration","text":"<p>Nagini includes an experimental xterm.js terminal integration that demonstrates creating a full browser-based Python terminal.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udda5\ufe0f Real Terminal Interface - Full xterm.js terminal with cursor and colors</li> <li>\ud83d\udc0d Interactive Python - Execute Python code via Nagini/Pyodide</li> <li>\ud83d\udccb Template System - Pre-built Python scripts (data analysis, plotting, calculator)</li> <li>\u2328\ufe0f Command History - Arrow key navigation through previous commands</li> <li>\ud83d\udcca Matplotlib Support - Automatic figure display above terminal</li> <li>\ud83c\udfa8 Professional Theme - VS Code-inspired dark interface</li> </ul>"},{"location":"#quick-demo","title":"Quick Demo","text":"<pre><code># Start server\npython -m http.server 8000\n\n# Open terminal\nhttp://localhost:8000/experiments/xterm/\n\n# Try commands\n$ help\n$ templates\n$ run data_analysis\n$ run plot_demo\n</code></pre>"},{"location":"#available-templates","title":"Available Templates","text":"<ul> <li>hello_world - User input demonstration</li> <li>data_analysis - Numpy statistics with matplotlib histogram</li> <li>calculator - Interactive math operations</li> <li>plot_demo - Multiple chart types (line, scatter, bar, pie)</li> </ul> <p>The xterm integration showcases how Nagini can power full-featured browser-based Python development environments.</p>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#pyodide-backend-web-worker-blob-workers","title":"Pyodide Backend (Web Worker + Blob Workers)","text":"<pre><code>Main Thread                          Blob Web Worker (Cross-Origin Compatible)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     \u2502             \u2502                     \u2502\n\u2502  Nagini             \u2502             \u2502  PyodideWorker      \u2502\n\u2502  \u251c\u2500 createManager   \u2502   Bundled   \u2502  \u251c\u2500 Entry Point     \u2502\n\u2502  \u251c\u2500 waitForReady    \u2502    Worker   \u2502  \u251c\u2500 All Modules     \u2502\n\u2502  \u251c\u2500 executeFromUrl  \u2502   Messages  \u2502  \u2502   Bundled        \u2502\n\u2502  \u2514\u2500 Backend Support \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502  \u2514\u2500 Configuration   \u2502\n\u2502                     \u2502             \u2502                     \u2502\n\u2502  PyodideManager     \u2502   Automatic \u2502  Pyodide Runtime    \u2502\n\u2502  \u251c\u2500 executeAsync    \u2502 Blob Worker \u2502  \u251c\u2500 Python Env      \u2502\n\u2502  \u251c\u2500 executeFile     \u2502  Creation   \u2502  \u251c\u2500 Package Mgmt    \u2502\n\u2502  \u251c\u2500 queueInput      \u2502             \u2502  \u251c\u2500 Matplotlib      \u2502\n\u2502  \u251c\u2500 fs()            \u2502             \u2502  \u251c\u2500 File Loading    \u2502\n\u2502  \u2514\u2500 Input Callbacks \u2502             \u2502  \u2514\u2500 WebAssembly     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#brython-backend-main-thread-only","title":"Brython Backend (Main Thread Only)","text":"<pre><code>Main Thread Only (No Workers)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                         \u2502\n\u2502  Nagini                BrythonManager   \u2502\n\u2502  \u251c\u2500 createManager \u2500\u2500\u2500\u25ba \u251c\u2500 executeAsync  \u2502\n\u2502  \u251c\u2500 waitForReady       \u251c\u2500 executeFile   \u2502\n\u2502  \u2514\u2500 executeFromUrl     \u2514\u2500 Transpiler    \u2502\n\u2502                               \u2502         \u2502\n\u2502  Brython Runtime             \u2502         \u2502\n\u2502  \u251c\u2500 JavaScript Transpilation \u2502         \u2502\n\u2502  \u251c\u2500 DOM Integration          \u2502         \u2502\n\u2502  \u251c\u2500 Turtle Graphics          \u2502         \u2502\n\u2502  \u2514\u2500 Instant Startup          \u2502         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#nagini-high-level-api","title":"Nagini (High-Level API)","text":"<pre><code>// Create Pyodide manager (requires bundled worker for cross-origin compatibility)\nconst pyodideManager = await Nagini.createManager(\n    'pyodide',\n    packages,\n    micropipPackages,\n    filesToLoad,\n    \"http://127.0.0.1:8010/src/pyodide/worker/worker-dist.js\"   // Auto-converted to blob worker\n);\n\n// Create Brython manager (no worker requirements)\nconst brythonManager = await Nagini.createManager(\n    'brython', \n    [],      // Packages ignored\n    [],      // Files ignored  \n    '',      // Init path ignored\n    ''       // Worker path ignored\n);\n\n// Wait for initialization (both backends)\nawait Nagini.waitForReady(manager, timeout);\n\n// Execute code from URL (both backends)\nconst result = await Nagini.executeFromUrl(url, manager, namespace);\n\n// Check supported backends\nconst backends = Nagini.getSupportedBackends(); // ['pyodide', 'brython']\nconst isSupported = Nagini.isBackendSupported('brython'); // true\n</code></pre>"},{"location":"#pyodidemanager-core-manager","title":"PyodideManager (Core Manager)","text":"<pre><code>// Execute Python code\nconst result = await manager.executeAsync(filename, code, namespace);\nmanager.executeFile(filename, code, namespace); // Fire-and-forget\n\n// Input handling\nmanager.queueInput(input);\nmanager.setInputCallback(callback);\nmanager.provideInput(input);\nconst waiting = manager.isWaitingForInput();\nconst prompt = manager.getCurrentPrompt();\n\n// Filesystem operations\nawait manager.fs(\"writeFile\", {path: \"file.txt\", content: \"data\"});\nconst content = await manager.fs(\"readFile\", {path: \"file.txt\"});\nawait manager.fs(\"mkdir\", {path: \"directory\"});\nconst exists = await manager.fs(\"exists\", {path: \"file.txt\"});\nconst files = await manager.fs(\"listdir\", {path: \".\"});\n\n// Manager state\nconsole.log(manager.isReady);\nconsole.log(manager.packages);\nconsole.log(manager.executionHistory);\n</code></pre>"},{"location":"#file-structure","title":"File Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 nagini.js                        # Main API entry point\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 validation.js                # Parameter validation utilities\n\u2502   \u2514\u2500\u2500 createBlobWorker.js          # Cross-origin worker utilities\n\u251c\u2500\u2500 brython/                         # Brython backend\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 lib/\n\u2502   \u2502   \u251c\u2500\u2500 brython.js\n\u2502   \u2502   \u2514\u2500\u2500 brython_stdlib.js\n\u2502   \u251c\u2500\u2500 manager/\n\u2502   \u2502   \u251c\u2500\u2500 manager.js\n\u2502   \u2502   \u251c\u2500\u2500 loader.js\n\u2502   \u2502   \u2514\u2500\u2500 executor.js\n\u2502   \u2514\u2500\u2500 python/\n\u2502       \u2514\u2500\u2500 turtle_min.py\n\u2514\u2500\u2500 pyodide/\n    \u251c\u2500\u2500 manager/\n    \u2502   \u251c\u2500\u2500 manager.js               # Core PyodideManager class\n    \u2502   \u251c\u2500\u2500 manager-static-execution.js  # Execution logic\n    \u2502   \u251c\u2500\u2500 manager-input.js         # Input handling\n    \u2502   \u2514\u2500\u2500 manager-fs.js            # Filesystem operations\n    \u251c\u2500\u2500 worker/\n    \u2502   \u251c\u2500\u2500 worker.js               # Worker entry point (ES6 modules)\n    \u2502   \u251c\u2500\u2500 worker-config.js        # Configuration constants\n    \u2502   \u251c\u2500\u2500 worker-handlers.js      # Message handlers\n    \u2502   \u251c\u2500\u2500 worker-execution.js     # Execution logic\n    \u2502   \u251c\u2500\u2500 worker-input.js         # Input handling\n    \u2502   \u251c\u2500\u2500 worker-fs.js            # Filesystem operations\n    \u2502   \u251c\u2500\u2500 webpack.config.cjs      # Webpack bundling configuration\n    \u2502   \u251c\u2500\u2500 package.json            # NPM dependencies and build scripts\n    \u2502   \u251c\u2500\u2500 package-lock.json       # Dependency lock file\n    \u2502   \u251c\u2500\u2500 worker-dist.js          # **Bundled worker output** (generated)\n    \u2502   \u251c\u2500\u2500 .gitignore              # Build artifacts exclusions\n    \u2502   \u251c\u2500\u2500 README.md               # Worker bundling documentation\n    \u2502   \u2514\u2500\u2500 node_modules/           # NPM dependencies (generated)\n    \u251c\u2500\u2500 file-loader/\n    \u2502   \u2514\u2500\u2500 file-loader.js          # Remote file loading\n    \u2514\u2500\u2500 python/\n        \u251c\u2500\u2500 pyodide_init.py         # Python initialization script\n        \u251c\u2500\u2500 capture_system.py       # Output capture system\n        \u251c\u2500\u2500 code_transformation.py  # Code transformation utilities\n        \u2514\u2500\u2500 pyodide_utilities.py    # Python helper functions\ntests/\n\u251c\u2500\u2500 unified-test.html               # **Comprehensive unified test suite**\n\u251c\u2500\u2500 flask-example.py                # Cross-origin Flask server (port 5001)\n\u2514\u2500\u2500 README.md                       # Unified test documentation\n</code></pre>"},{"location":"#pyodide-worker-bundling-system","title":"Pyodide Worker Bundling System","text":"<p>The Pyodide worker directory includes a complete webpack-based bundling system to resolve ES6 import issues when creating blob workers across different origins (e.g., Flask apps):</p> <ul> <li>Development: Use modular <code>worker.js</code> with ES6 imports (single-origin only)</li> <li>Production: Use bundled <code>worker-dist.js</code> (cross-origin compatible)</li> <li>Automatic Conversion: Nagini automatically converts bundled workers to blob URLs</li> <li>Build Process: <code>npm run build</code> creates optimized bundle</li> <li>Cross-Origin Support: Blob workers work with Flask, Django, any framework</li> </ul> <p>\u26a0\ufe0f Note: Brython doesn't use workers, so this system is Pyodide-specific.</p>"},{"location":"#testing","title":"Testing","text":""},{"location":"#unified-test-suite","title":"Unified Test Suite","text":"<p>Nagini includes a comprehensive unified test suite that demonstrates both Pyodide and Brython backends in a side-by-side comparison. The unified test provides a complete evaluation of cross-origin compatibility, worker architecture, and dual backend capabilities.</p> <p>\ud83c\udfaf Features Tested:</p>"},{"location":"#pyodide-column-left-full-featured","title":"Pyodide Column (Left - Full-Featured)","text":"<ul> <li>\u2705 Basic Python execution with automatic blob workers</li> <li>\u2705 NumPy + Matplotlib integration with figure capture</li> <li>\u2705 Interactive input() handling with queue system</li> <li>\u2705 Cross-origin compatibility (Flask \u2194 Nagini servers)</li> <li>\u2705 Automatic blob worker creation for CORS scenarios</li> <li>\u2705 Matplotlib WebAgg Backend validation</li> </ul>"},{"location":"#brython-column-right-lightweight","title":"Brython Column (Right - Lightweight)","text":"<ul> <li>\u2705 Basic Python execution (JavaScript transpilation)</li> <li>\u2705 Tactical turtle graphics with 300x300 canvas</li> <li>\u2705 DOM integration and browser APIs</li> <li>\u2705 Instant startup (no downloads required)</li> </ul>"},{"location":"#quick-test-setup","title":"Quick Test Setup","text":"<pre><code># 1. Start Nagini server (port 8010)\npython3 serve.py\n\n# 2. Start Flask cross-origin test server (port 5001) \npython3 tests/flask-example.py\n\n# 3. Open unified test suite\nopen http://127.0.0.1:8010/tests/unified-test.html\n\n# 4. Test everything with buttons in both columns\n</code></pre>"},{"location":"#cross-origin-testing","title":"Cross-Origin Testing","text":"<p>The test suite demonstrates real-world cross-origin scenarios: - Nagini Server: <code>http://127.0.0.1:8010</code> (serves static files) - Flask Server: <code>http://127.0.0.1:5001</code> (provides CORS headers) - Blob Workers: Automatically created for cross-origin compatibility - Full URLs: Required for proper cross-origin module loading</p>"},{"location":"#test-coverage","title":"Test Coverage","text":"<p>The unified test suite covers all core features:</p> <ul> <li>Manager creation and initialization (both backends)</li> <li>Code execution with results tracking</li> <li>Namespace isolation and variable scoping</li> <li>Interactive input handling with queues (Pyodide only)</li> <li>Matplotlib figure capture and display (Pyodide only)</li> <li>Turtle graphics with tactical patterns (Brython only)</li> <li>DOM integration and browser APIs (Brython only)</li> <li>Cross-origin worker compatibility</li> <li>Automatic blob worker creation</li> <li>Dual backend comparison</li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>Pyodide v0.28.0 - Python runtime via WebAssembly (Mozilla Public License 2.0)</li> <li>Brython - Python-to-JavaScript transpilation capabilities (BSD 3-Clause License)</li> <li>Matplotlib WebAgg Backend - The new default backend for Matplotlib, providing a more stable and feature-rich experience.</li> <li>Modern Browser - WebWorkers, SharedArrayBuffer support</li> <li>No external dependencies - Self-contained system</li> </ul> <p>\ud83d\udcc4 For complete license information and compatibility details, see 3RD-PARTY.md</p>"},{"location":"#performance","title":"Performance","text":"<ul> <li>Initialization: ~3-7 seconds (packages + network)</li> <li>Execution: Near-native Python speed in WebAssembly</li> <li>Memory: ~100-300MB (package dependent)</li> <li>Figure Capture: Real-time base64 encoding</li> </ul>"},{"location":"#licensing-gnu-affero-general-public-license-v30-agpl-30","title":"Licensing - GNU Affero General Public License v3.0 (AGPL-3.0)","text":"<p>Nagini is licensed under the GNU Affero General Public License v3.0 (AGPL-3.0).</p>"},{"location":"#agpl-v30-requirements","title":"\ud83d\udccb AGPL v3.0 Requirements:","text":"<ul> <li>Source Code Sharing: Any modifications to Nagini must be shared under the same license</li> <li>Network Use: If you run Nagini on a server and let users interact with it remotely, you must make your source code available to those users</li> <li>Derivative Works: Must use compatible licenses</li> <li>Copyright Notices: Must be preserved</li> </ul>"},{"location":"#what-you-can-do","title":"\u2705 What You Can Do:","text":"<ul> <li>Use freely for any purpose (personal, educational, commercial, research)</li> <li>Modify the source code to fit your needs</li> <li>Distribute copies and modifications</li> <li>Run on servers and provide network services</li> </ul>"},{"location":"#what-you-must-do","title":"\ud83d\udcdd What You Must Do:","text":"<ul> <li>Share source code of any modifications you make</li> <li>Provide source access to users of network services</li> <li>Include copyright notices and license information</li> <li>Use compatible licenses for derivative works</li> </ul>"},{"location":"#perfect-for","title":"\ud83c\udf93 Perfect For:","text":"<ul> <li>Educational institutions and training programs</li> <li>Research organizations and academic projects</li> <li>Open-source projects and community initiatives</li> <li>Commercial applications that comply with copyleft requirements</li> <li>Government agencies and public organizations</li> <li>Individual developers and personal projects</li> </ul>"},{"location":"#gnu-affero-general-public-license-v30","title":"GNU Affero General Public License v3.0","text":"<p>Copyright (C) 2025 SAS POINTCARRE.APP</p> <p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p> <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.</p> <p>You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/.</p>"},{"location":"#additional-terms-for-network-use","title":"Additional Terms for Network Use","text":"<p>If you run a modified version of this software on a server and let users interact with it remotely through a computer network, you must make the source code of your modified version available to those users.</p>"},{"location":"#third-party-dependencies","title":"Third-Party Dependencies","text":"<p>This software incorporates components from the following open-source projects:</p>"},{"location":"#brython","title":"Brython","text":"<ul> <li>License: BSD 3-Clause \"New\" or \"Revised\" License</li> <li>Copyright: Copyright (c) 2012, Pierre Quentel pierre.quentel@gmail.com</li> <li>Project: brython-dev/brython</li> <li>Usage: Python-to-JavaScript transpilation capabilities</li> </ul> <p>BSD 3-Clause License Requirements: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</p>"},{"location":"#pyodide","title":"Pyodide","text":"<ul> <li>License: Mozilla Public License 2.0</li> <li>Project: pyodide/pyodide</li> <li>Usage: Python runtime via WebAssembly</li> </ul> <p>Mozilla Public License 2.0 Requirements: - Source code of licensed files and modifications must be made available under the same license - Copyright and license notices must be preserved - Patent rights are expressly granted - Larger works using the licensed work may be distributed under different terms</p> <p>\ud83d\udcc4 For complete license texts and detailed information about all dependencies, see 3RD-PARTY.md</p> <p>Nagini is free and open-source software licensed under AGPL v3.0, ensuring it remains available for all users while promoting open-source collaboration and transparency. </p>"},{"location":"3RD-PARTY/","title":"Third-Party Dependencies","text":""},{"location":"3RD-PARTY/#license-compatibility-matrix","title":"License Compatibility Matrix","text":"Dependency License Runtime Usage Compatibility with AGPL v3.0 Pyodide Mozilla Public License 2.0 Python runtime via WebAssembly \u2705 Compatible Brython BSD 3-Clause Python-to-JavaScript transpilation \u2705 Compatible"},{"location":"3RD-PARTY/#usage-model","title":"Usage Model","text":"<p>Important: Nagini uses both dependencies at runtime only - we do not modify, fork, or redistribute the source code of these projects. This significantly simplifies license compliance requirements.</p>"},{"location":"3RD-PARTY/#runtime-usage-implications","title":"Runtime Usage Implications","text":"<ul> <li>No source code modification: We use these tools as-is without changes</li> <li>No redistribution: Dependencies are loaded independently by end users</li> <li>Minimal compliance burden: Only basic attribution requirements apply</li> </ul>"},{"location":"3RD-PARTY/#license-requirements","title":"License Requirements","text":""},{"location":"3RD-PARTY/#pyodide-mpl-20","title":"Pyodide (MPL 2.0)","text":"<ul> <li>Project: pyodide/pyodide</li> <li>Usage: Python runtime environment via WebAssembly</li> <li>Integration: Loaded at runtime in browser environments</li> <li>Compliance Requirements:</li> <li>\u2705 Preserve copyright notices (already handled by runtime loading)</li> <li>\u2705 No source disclosure required (runtime-only usage)</li> <li>\u2705 No copyleft obligations for our code</li> </ul>"},{"location":"3RD-PARTY/#brython-bsd-3-clause","title":"Brython (BSD 3-Clause)","text":"<ul> <li>Project: brython-dev/brython  </li> <li>Copyright: Copyright (c) 2012, Pierre Quentel pierre.quentel@gmail.com</li> <li>Usage: Python-to-JavaScript transpilation capabilities</li> <li>Integration: Used as runtime transpiler, not embedded in our codebase</li> <li>Compliance Requirements:</li> <li>\u2705 Preserve copyright notice (satisfied by runtime loading)</li> <li>\u2705 Include disclaimer (handled by original distribution)</li> <li>\u2705 No restrictions on our code licensing</li> </ul>"},{"location":"3RD-PARTY/#license-compatibility-analysis","title":"License Compatibility Analysis","text":""},{"location":"3RD-PARTY/#agpl-v30-compatibility","title":"AGPL v3.0 Compatibility","text":"<p>Both dependencies are fully compatible with AGPL v3.0 licensing: - MPL 2.0: Explicitly compatible with GPL/AGPL (weak copyleft) - BSD 3-Clause: Permissive license, no restrictions on derivative licensing</p>"},{"location":"3RD-PARTY/#nagini-agpl-v30-licensing","title":"Nagini AGPL v3.0 Licensing","text":"<p>Our runtime-only usage model is fully compatible with AGPL v3.0:</p>"},{"location":"3RD-PARTY/#agpl-v30-distribution","title":"\u2705 AGPL v3.0 Distribution","text":"<ul> <li>No license conflicts with runtime dependencies</li> <li>All copyleft requirements satisfied</li> <li>Users receive full source code access</li> <li>Network use provisions apply</li> </ul>"},{"location":"3RD-PARTY/#compliance-checklist","title":"Compliance Checklist","text":"<ul> <li>[x] Attribution: Copyright notices preserved through runtime loading</li> <li>[x] No Modification: Using dependencies as-is without changes</li> <li>[x] No Redistribution: Dependencies loaded independently</li> <li>[x] License Compatibility: All licenses compatible with AGPL v3.0</li> <li>[x] Documentation: This file serves as license compliance documentation</li> <li>[x] Source Availability: Full source code available under AGPL v3.0</li> <li>[x] Network Use: AGPL network use provisions documented</li> </ul>"},{"location":"3RD-PARTY/#full-license-references","title":"Full License References","text":"<p>For complete license texts: - MPL 2.0: https://mozilla.org/MPL/2.0/ - BSD 3-Clause: https://opensource.org/licenses/BSD-3-Clause - AGPL v3.0: https://www.gnu.org/licenses/agpl-3.0.html</p>"},{"location":"3RD-PARTY/#legal-disclaimer","title":"Legal Disclaimer","text":"<p>This analysis is based on our understanding of the licenses and usage patterns. For critical applications, consult with qualified legal counsel to ensure compliance with all applicable licenses and regulations.</p>"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#modules","title":"Modules","text":"ValidationUtils <p>Validation Utilities for Nagini</p> <p>Centralized parameter validation functions used across all components to ensure consistent error handling and type checking.</p> ValidationUtils <p>Validation Utilities for Nagini</p> <p>Centralized parameter validation functions used across all components to ensure consistent error handling and type checking.</p>"},{"location":"api-reference/#classes","title":"Classes","text":"BrythonManager <p>BrythonManager \u2013 Minimal backend for Nagini focused on turtle graphics. Provides the same public surface as PyodideManager but runs directly in the main thread with Brython.  Input(), packages, and filesystem are NOT supported for now.</p> PyodideFileLoader <p>PyodideFileLoader class for loading files into Pyodide filesystem</p> PyodideManagerFS <p>Static class containing filesystem functionality for PyodideManager</p> PyodideManagerInput <p>Static class containing input handling functionality for PyodideManager</p> PyodideManager"},{"location":"api-reference/#functions","title":"Functions","text":"createBlobWorkerUrl(workerUrl) \u21d2 <code>Promise.&lt;string&gt;</code> <p>Create a blob worker URL from a bundled worker script</p> createBlobWorker(workerUrl) \u21d2 <code>Promise.&lt;Worker&gt;</code> <p>Create a Worker instance using blob URL pattern</p> revokeBlobUrl(blobUrl) <p>Cleanup blob URL to prevent memory leaks</p> executeAsync() <p>Execute Python code with Brython, capturing stdout, stderr and missive. Renamed from brython-executor.js</p> createBlobWorkerUrl(workerUrl) \u21d2 <code>Promise.&lt;string&gt;</code> <p>Create a blob worker URL from a bundled worker script</p> createBlobWorker(workerUrl) \u21d2 <code>Promise.&lt;Worker&gt;</code> <p>Create a Worker instance using blob URL pattern</p> revokeBlobUrl(blobUrl) <p>Cleanup blob URL to prevent memory leaks</p>"},{"location":"api-reference/#typedefs","title":"Typedefs","text":"FileToLoad : <code>Object</code> LoadOptions : <code>Object</code> PyodideAPI : <code>Object</code> FSOperation : <code>'writeFile'</code> | <code>'readFile'</code> | <code>'mkdir'</code> | <code>'exists'</code> | <code>'listdir'</code> FSOperationParams : <code>Object</code> FSOperationResult : <code>Object</code> ExecutionResult : <code>Object</code> FileToLoad : <code>Object</code> WorkerMessage : <code>Object</code> ExecutionResult : <code>Object</code>"},{"location":"api-reference/#validationutils","title":"ValidationUtils","text":"<p>Validation Utilities for Nagini</p> <p>Centralized parameter validation functions used across all components to ensure consistent error handling and type checking.</p> <ul> <li>ValidationUtils<ul> <li>static<ul> <li>.ValidationUtils<ul> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> </ul> </li> <li>.ValidationUtils<ul> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> </ul> </li> </ul> </li> <li>inner<ul> <li>~ValidationError : <code>Object</code></li> <li>~ValidationError : <code>Object</code></li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#validationutilsvalidationutils","title":"ValidationUtils.ValidationUtils","text":"<p>General validation utility class with static methods for parameter validation</p> <p>Kind: static class of <code>ValidationUtils</code> </p> <ul> <li>.ValidationUtils<ul> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#validationutilsvalidatearrayvalue-paramname-component","title":"ValidationUtils.validateArray(value, paramName, [component])","text":"<p>Validate that a value is an array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not an array</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatestringvalue-paramname-component-allowempty","title":"ValidationUtils.validateString(value, paramName, [component], [allowEmpty])","text":"<p>Validate that a value is a string</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a string or is empty when not allowed</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> [allowEmpty] <code>boolean</code> <code>false</code> <p>Whether to allow empty strings</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebooleanvalue-paramname-component","title":"ValidationUtils.validateBoolean(value, paramName, [component])","text":"<p>Validate that a value is a boolean</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a boolean</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefunctionvalue-paramname-component","title":"ValidationUtils.validateFunction(value, paramName, [component])","text":"<p>Validate that a value is a function</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a function</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateobjectvalue-paramname-component","title":"ValidationUtils.validateObject(value, paramName, [component])","text":"<p>Validate that a value is an object (not null, not array)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a plain object</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateworkerworker-component","title":"ValidationUtils.validateWorker(worker, [component])","text":"<p>Validate Worker instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If worker is not valid</p></li> </ul> Param Type Default Description worker <code>any</code> <p>Worker to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepyodidepyodide-component","title":"ValidationUtils.validatePyodide(pyodide, [component])","text":"<p>Validate Pyodide instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If pyodide is not valid</p></li> </ul> Param Type Default Description pyodide <code>any</code> <p>Pyodide instance to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefilestoloadfilestoload-component","title":"ValidationUtils.validateFilesToLoad(filesToLoad, [component])","text":"<p>Validate file objects array for FileLoader</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any file object is invalid</p></li> </ul> Param Type Default Description filesToLoad <code>Array</code> <p>Array of file objects</p> [component] <code>string</code> <code>\"PyodideFileLoader\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepackagespackages-component","title":"ValidationUtils.validatePackages(packages, [component])","text":"<p>Validate packages array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If packages array is invalid</p></li> </ul> Param Type Default Description packages <code>Array</code> <p>Array of package names</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatenamespacenamespace-component","title":"ValidationUtils.validateNamespace(namespace, [component])","text":"<p>Validate namespace object (optional parameter)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If namespace is provided but invalid</p></li> </ul> Param Type Default Description namespace <code>any</code> <p>Namespace to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateexecutionparamsfilename-code-namespace-component","title":"ValidationUtils.validateExecutionParams(filename, code, [namespace], [component])","text":"<p>Validate execution parameters</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any parameter is invalid</p></li> </ul> Param Type Default Description filename <code>string</code> <p>Filename for execution</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>any</code> <p>Optional namespace</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilscheckdangerouspatternscode-arraystring","title":"ValidationUtils.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code>","text":"<p>Check for potentially dangerous Python code patterns</p> <p>Kind: static method of <code>ValidationUtils</code> Returns: <code>Array.&lt;string&gt;</code> - <p>Array of dangerous patterns found</p> </p> Param Type Description code <code>string</code> <p>Python code to check</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebackendbackend-component","title":"ValidationUtils.validateBackend(backend, [component])","text":"<p>Validate backend parameter (must be 'pyodide' or &lt;?&gt;)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If backend is not valid</p></li> </ul> Param Type Default Description backend <code>string</code> <p>Backend to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatearrayvalue-paramname-component_1","title":"ValidationUtils.validateArray(value, paramName, [component])","text":"<p>Validate that a value is an array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not an array</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatestringvalue-paramname-component-allowempty_1","title":"ValidationUtils.validateString(value, paramName, [component], [allowEmpty])","text":"<p>Validate that a value is a string</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a string or is empty when not allowed</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> [allowEmpty] <code>boolean</code> <code>false</code> <p>Whether to allow empty strings</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebooleanvalue-paramname-component_1","title":"ValidationUtils.validateBoolean(value, paramName, [component])","text":"<p>Validate that a value is a boolean</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a boolean</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefunctionvalue-paramname-component_1","title":"ValidationUtils.validateFunction(value, paramName, [component])","text":"<p>Validate that a value is a function</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a function</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateobjectvalue-paramname-component_1","title":"ValidationUtils.validateObject(value, paramName, [component])","text":"<p>Validate that a value is an object (not null, not array)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a plain object</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateworkerworker-component_1","title":"ValidationUtils.validateWorker(worker, [component])","text":"<p>Validate Worker instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If worker is not valid</p></li> </ul> Param Type Default Description worker <code>any</code> <p>Worker to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepyodidepyodide-component_1","title":"ValidationUtils.validatePyodide(pyodide, [component])","text":"<p>Validate Pyodide instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If pyodide is not valid</p></li> </ul> Param Type Default Description pyodide <code>any</code> <p>Pyodide instance to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefilestoloadfilestoload-component_1","title":"ValidationUtils.validateFilesToLoad(filesToLoad, [component])","text":"<p>Validate file objects array for FileLoader</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any file object is invalid</p></li> </ul> Param Type Default Description filesToLoad <code>Array</code> <p>Array of file objects</p> [component] <code>string</code> <code>\"PyodideFileLoader\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepackagespackages-component_1","title":"ValidationUtils.validatePackages(packages, [component])","text":"<p>Validate packages array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If packages array is invalid</p></li> </ul> Param Type Default Description packages <code>Array</code> <p>Array of package names</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatenamespacenamespace-component_1","title":"ValidationUtils.validateNamespace(namespace, [component])","text":"<p>Validate namespace object (optional parameter)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If namespace is provided but invalid</p></li> </ul> Param Type Default Description namespace <code>any</code> <p>Namespace to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateexecutionparamsfilename-code-namespace-component_1","title":"ValidationUtils.validateExecutionParams(filename, code, [namespace], [component])","text":"<p>Validate execution parameters</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any parameter is invalid</p></li> </ul> Param Type Default Description filename <code>string</code> <p>Filename for execution</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>any</code> <p>Optional namespace</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilscheckdangerouspatternscode-arraystring_1","title":"ValidationUtils.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code>","text":"<p>Check for potentially dangerous Python code patterns</p> <p>Kind: static method of <code>ValidationUtils</code> Returns: <code>Array.&lt;string&gt;</code> - <p>Array of dangerous patterns found</p> </p> Param Type Description code <code>string</code> <p>Python code to check</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebackendbackend-component_1","title":"ValidationUtils.validateBackend(backend, [component])","text":"<p>Validate backend parameter (must be 'pyodide' or &lt;?&gt;)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If backend is not valid</p></li> </ul> Param Type Default Description backend <code>string</code> <p>Backend to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidationutils_1","title":"ValidationUtils.ValidationUtils","text":"<p>General validation utility class with static methods for parameter validation</p> <p>Kind: static class of <code>ValidationUtils</code> </p> <ul> <li>.ValidationUtils<ul> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#validationutilsvalidatearrayvalue-paramname-component_2","title":"ValidationUtils.validateArray(value, paramName, [component])","text":"<p>Validate that a value is an array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not an array</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatestringvalue-paramname-component-allowempty_2","title":"ValidationUtils.validateString(value, paramName, [component], [allowEmpty])","text":"<p>Validate that a value is a string</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a string or is empty when not allowed</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> [allowEmpty] <code>boolean</code> <code>false</code> <p>Whether to allow empty strings</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebooleanvalue-paramname-component_2","title":"ValidationUtils.validateBoolean(value, paramName, [component])","text":"<p>Validate that a value is a boolean</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a boolean</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefunctionvalue-paramname-component_2","title":"ValidationUtils.validateFunction(value, paramName, [component])","text":"<p>Validate that a value is a function</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a function</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateobjectvalue-paramname-component_2","title":"ValidationUtils.validateObject(value, paramName, [component])","text":"<p>Validate that a value is an object (not null, not array)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a plain object</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateworkerworker-component_2","title":"ValidationUtils.validateWorker(worker, [component])","text":"<p>Validate Worker instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If worker is not valid</p></li> </ul> Param Type Default Description worker <code>any</code> <p>Worker to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepyodidepyodide-component_2","title":"ValidationUtils.validatePyodide(pyodide, [component])","text":"<p>Validate Pyodide instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If pyodide is not valid</p></li> </ul> Param Type Default Description pyodide <code>any</code> <p>Pyodide instance to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefilestoloadfilestoload-component_2","title":"ValidationUtils.validateFilesToLoad(filesToLoad, [component])","text":"<p>Validate file objects array for FileLoader</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any file object is invalid</p></li> </ul> Param Type Default Description filesToLoad <code>Array</code> <p>Array of file objects</p> [component] <code>string</code> <code>\"PyodideFileLoader\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepackagespackages-component_2","title":"ValidationUtils.validatePackages(packages, [component])","text":"<p>Validate packages array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If packages array is invalid</p></li> </ul> Param Type Default Description packages <code>Array</code> <p>Array of package names</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatenamespacenamespace-component_2","title":"ValidationUtils.validateNamespace(namespace, [component])","text":"<p>Validate namespace object (optional parameter)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If namespace is provided but invalid</p></li> </ul> Param Type Default Description namespace <code>any</code> <p>Namespace to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateexecutionparamsfilename-code-namespace-component_2","title":"ValidationUtils.validateExecutionParams(filename, code, [namespace], [component])","text":"<p>Validate execution parameters</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any parameter is invalid</p></li> </ul> Param Type Default Description filename <code>string</code> <p>Filename for execution</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>any</code> <p>Optional namespace</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilscheckdangerouspatternscode-arraystring_2","title":"ValidationUtils.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code>","text":"<p>Check for potentially dangerous Python code patterns</p> <p>Kind: static method of <code>ValidationUtils</code> Returns: <code>Array.&lt;string&gt;</code> - <p>Array of dangerous patterns found</p> </p> Param Type Description code <code>string</code> <p>Python code to check</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebackendbackend-component_2","title":"ValidationUtils.validateBackend(backend, [component])","text":"<p>Validate backend parameter (must be 'pyodide' or &lt;?&gt;)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If backend is not valid</p></li> </ul> Param Type Default Description backend <code>string</code> <p>Backend to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatearrayvalue-paramname-component_3","title":"ValidationUtils.validateArray(value, paramName, [component])","text":"<p>Validate that a value is an array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not an array</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatestringvalue-paramname-component-allowempty_3","title":"ValidationUtils.validateString(value, paramName, [component], [allowEmpty])","text":"<p>Validate that a value is a string</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a string or is empty when not allowed</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> [allowEmpty] <code>boolean</code> <code>false</code> <p>Whether to allow empty strings</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebooleanvalue-paramname-component_3","title":"ValidationUtils.validateBoolean(value, paramName, [component])","text":"<p>Validate that a value is a boolean</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a boolean</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefunctionvalue-paramname-component_3","title":"ValidationUtils.validateFunction(value, paramName, [component])","text":"<p>Validate that a value is a function</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a function</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateobjectvalue-paramname-component_3","title":"ValidationUtils.validateObject(value, paramName, [component])","text":"<p>Validate that a value is an object (not null, not array)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a plain object</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateworkerworker-component_3","title":"ValidationUtils.validateWorker(worker, [component])","text":"<p>Validate Worker instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If worker is not valid</p></li> </ul> Param Type Default Description worker <code>any</code> <p>Worker to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepyodidepyodide-component_3","title":"ValidationUtils.validatePyodide(pyodide, [component])","text":"<p>Validate Pyodide instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If pyodide is not valid</p></li> </ul> Param Type Default Description pyodide <code>any</code> <p>Pyodide instance to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefilestoloadfilestoload-component_3","title":"ValidationUtils.validateFilesToLoad(filesToLoad, [component])","text":"<p>Validate file objects array for FileLoader</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any file object is invalid</p></li> </ul> Param Type Default Description filesToLoad <code>Array</code> <p>Array of file objects</p> [component] <code>string</code> <code>\"PyodideFileLoader\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepackagespackages-component_3","title":"ValidationUtils.validatePackages(packages, [component])","text":"<p>Validate packages array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If packages array is invalid</p></li> </ul> Param Type Default Description packages <code>Array</code> <p>Array of package names</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatenamespacenamespace-component_3","title":"ValidationUtils.validateNamespace(namespace, [component])","text":"<p>Validate namespace object (optional parameter)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If namespace is provided but invalid</p></li> </ul> Param Type Default Description namespace <code>any</code> <p>Namespace to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateexecutionparamsfilename-code-namespace-component_3","title":"ValidationUtils.validateExecutionParams(filename, code, [namespace], [component])","text":"<p>Validate execution parameters</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any parameter is invalid</p></li> </ul> Param Type Default Description filename <code>string</code> <p>Filename for execution</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>any</code> <p>Optional namespace</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilscheckdangerouspatternscode-arraystring_3","title":"ValidationUtils.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code>","text":"<p>Check for potentially dangerous Python code patterns</p> <p>Kind: static method of <code>ValidationUtils</code> Returns: <code>Array.&lt;string&gt;</code> - <p>Array of dangerous patterns found</p> </p> Param Type Description code <code>string</code> <p>Python code to check</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebackendbackend-component_3","title":"ValidationUtils.validateBackend(backend, [component])","text":"<p>Validate backend parameter (must be 'pyodide' or &lt;?&gt;)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If backend is not valid</p></li> </ul> Param Type Default Description backend <code>string</code> <p>Backend to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidationerror-object","title":"ValidationUtils~ValidationError : <code>Object</code>","text":"<p>Kind: inner typedef of <code>ValidationUtils</code> Properties</p> Name Type Description message <code>string</code> <p>Error message</p> component <code>string</code> <p>Component that threw the error</p> parameter <code>string</code> <p>Parameter that failed validation</p> <p></p>"},{"location":"api-reference/#validationutilsvalidationerror-object_1","title":"ValidationUtils~ValidationError : <code>Object</code>","text":"<p>Kind: inner typedef of <code>ValidationUtils</code> Properties</p> Name Type Description message <code>string</code> <p>Error message</p> component <code>string</code> <p>Component that threw the error</p> parameter <code>string</code> <p>Parameter that failed validation</p> <p></p>"},{"location":"api-reference/#validationutils_1","title":"ValidationUtils","text":"<p>Validation Utilities for Nagini</p> <p>Centralized parameter validation functions used across all components to ensure consistent error handling and type checking.</p> <ul> <li>ValidationUtils<ul> <li>static<ul> <li>.ValidationUtils<ul> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> </ul> </li> <li>.ValidationUtils<ul> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> </ul> </li> </ul> </li> <li>inner<ul> <li>~ValidationError : <code>Object</code></li> <li>~ValidationError : <code>Object</code></li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#validationutilsvalidationutils_2","title":"ValidationUtils.ValidationUtils","text":"<p>General validation utility class with static methods for parameter validation</p> <p>Kind: static class of <code>ValidationUtils</code> </p> <ul> <li>.ValidationUtils<ul> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#validationutilsvalidatearrayvalue-paramname-component_4","title":"ValidationUtils.validateArray(value, paramName, [component])","text":"<p>Validate that a value is an array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not an array</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatestringvalue-paramname-component-allowempty_4","title":"ValidationUtils.validateString(value, paramName, [component], [allowEmpty])","text":"<p>Validate that a value is a string</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a string or is empty when not allowed</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> [allowEmpty] <code>boolean</code> <code>false</code> <p>Whether to allow empty strings</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebooleanvalue-paramname-component_4","title":"ValidationUtils.validateBoolean(value, paramName, [component])","text":"<p>Validate that a value is a boolean</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a boolean</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefunctionvalue-paramname-component_4","title":"ValidationUtils.validateFunction(value, paramName, [component])","text":"<p>Validate that a value is a function</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a function</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateobjectvalue-paramname-component_4","title":"ValidationUtils.validateObject(value, paramName, [component])","text":"<p>Validate that a value is an object (not null, not array)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a plain object</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateworkerworker-component_4","title":"ValidationUtils.validateWorker(worker, [component])","text":"<p>Validate Worker instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If worker is not valid</p></li> </ul> Param Type Default Description worker <code>any</code> <p>Worker to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepyodidepyodide-component_4","title":"ValidationUtils.validatePyodide(pyodide, [component])","text":"<p>Validate Pyodide instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If pyodide is not valid</p></li> </ul> Param Type Default Description pyodide <code>any</code> <p>Pyodide instance to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefilestoloadfilestoload-component_4","title":"ValidationUtils.validateFilesToLoad(filesToLoad, [component])","text":"<p>Validate file objects array for FileLoader</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any file object is invalid</p></li> </ul> Param Type Default Description filesToLoad <code>Array</code> <p>Array of file objects</p> [component] <code>string</code> <code>\"PyodideFileLoader\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepackagespackages-component_4","title":"ValidationUtils.validatePackages(packages, [component])","text":"<p>Validate packages array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If packages array is invalid</p></li> </ul> Param Type Default Description packages <code>Array</code> <p>Array of package names</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatenamespacenamespace-component_4","title":"ValidationUtils.validateNamespace(namespace, [component])","text":"<p>Validate namespace object (optional parameter)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If namespace is provided but invalid</p></li> </ul> Param Type Default Description namespace <code>any</code> <p>Namespace to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateexecutionparamsfilename-code-namespace-component_4","title":"ValidationUtils.validateExecutionParams(filename, code, [namespace], [component])","text":"<p>Validate execution parameters</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any parameter is invalid</p></li> </ul> Param Type Default Description filename <code>string</code> <p>Filename for execution</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>any</code> <p>Optional namespace</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilscheckdangerouspatternscode-arraystring_4","title":"ValidationUtils.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code>","text":"<p>Check for potentially dangerous Python code patterns</p> <p>Kind: static method of <code>ValidationUtils</code> Returns: <code>Array.&lt;string&gt;</code> - <p>Array of dangerous patterns found</p> </p> Param Type Description code <code>string</code> <p>Python code to check</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebackendbackend-component_4","title":"ValidationUtils.validateBackend(backend, [component])","text":"<p>Validate backend parameter (must be 'pyodide' or &lt;?&gt;)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If backend is not valid</p></li> </ul> Param Type Default Description backend <code>string</code> <p>Backend to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatearrayvalue-paramname-component_5","title":"ValidationUtils.validateArray(value, paramName, [component])","text":"<p>Validate that a value is an array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not an array</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatestringvalue-paramname-component-allowempty_5","title":"ValidationUtils.validateString(value, paramName, [component], [allowEmpty])","text":"<p>Validate that a value is a string</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a string or is empty when not allowed</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> [allowEmpty] <code>boolean</code> <code>false</code> <p>Whether to allow empty strings</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebooleanvalue-paramname-component_5","title":"ValidationUtils.validateBoolean(value, paramName, [component])","text":"<p>Validate that a value is a boolean</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a boolean</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefunctionvalue-paramname-component_5","title":"ValidationUtils.validateFunction(value, paramName, [component])","text":"<p>Validate that a value is a function</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a function</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateobjectvalue-paramname-component_5","title":"ValidationUtils.validateObject(value, paramName, [component])","text":"<p>Validate that a value is an object (not null, not array)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a plain object</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateworkerworker-component_5","title":"ValidationUtils.validateWorker(worker, [component])","text":"<p>Validate Worker instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If worker is not valid</p></li> </ul> Param Type Default Description worker <code>any</code> <p>Worker to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepyodidepyodide-component_5","title":"ValidationUtils.validatePyodide(pyodide, [component])","text":"<p>Validate Pyodide instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If pyodide is not valid</p></li> </ul> Param Type Default Description pyodide <code>any</code> <p>Pyodide instance to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefilestoloadfilestoload-component_5","title":"ValidationUtils.validateFilesToLoad(filesToLoad, [component])","text":"<p>Validate file objects array for FileLoader</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any file object is invalid</p></li> </ul> Param Type Default Description filesToLoad <code>Array</code> <p>Array of file objects</p> [component] <code>string</code> <code>\"PyodideFileLoader\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepackagespackages-component_5","title":"ValidationUtils.validatePackages(packages, [component])","text":"<p>Validate packages array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If packages array is invalid</p></li> </ul> Param Type Default Description packages <code>Array</code> <p>Array of package names</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatenamespacenamespace-component_5","title":"ValidationUtils.validateNamespace(namespace, [component])","text":"<p>Validate namespace object (optional parameter)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If namespace is provided but invalid</p></li> </ul> Param Type Default Description namespace <code>any</code> <p>Namespace to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateexecutionparamsfilename-code-namespace-component_5","title":"ValidationUtils.validateExecutionParams(filename, code, [namespace], [component])","text":"<p>Validate execution parameters</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any parameter is invalid</p></li> </ul> Param Type Default Description filename <code>string</code> <p>Filename for execution</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>any</code> <p>Optional namespace</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilscheckdangerouspatternscode-arraystring_5","title":"ValidationUtils.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code>","text":"<p>Check for potentially dangerous Python code patterns</p> <p>Kind: static method of <code>ValidationUtils</code> Returns: <code>Array.&lt;string&gt;</code> - <p>Array of dangerous patterns found</p> </p> Param Type Description code <code>string</code> <p>Python code to check</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebackendbackend-component_5","title":"ValidationUtils.validateBackend(backend, [component])","text":"<p>Validate backend parameter (must be 'pyodide' or &lt;?&gt;)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If backend is not valid</p></li> </ul> Param Type Default Description backend <code>string</code> <p>Backend to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidationutils_3","title":"ValidationUtils.ValidationUtils","text":"<p>General validation utility class with static methods for parameter validation</p> <p>Kind: static class of <code>ValidationUtils</code> </p> <ul> <li>.ValidationUtils<ul> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> <li>.validateArray(value, paramName, [component])</li> <li>.validateString(value, paramName, [component], [allowEmpty])</li> <li>.validateBoolean(value, paramName, [component])</li> <li>.validateFunction(value, paramName, [component])</li> <li>.validateObject(value, paramName, [component])</li> <li>.validateWorker(worker, [component])</li> <li>.validatePyodide(pyodide, [component])</li> <li>.validateFilesToLoad(filesToLoad, [component])</li> <li>.validatePackages(packages, [component])</li> <li>.validateNamespace(namespace, [component])</li> <li>.validateExecutionParams(filename, code, [namespace], [component])</li> <li>.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.validateBackend(backend, [component])</li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#validationutilsvalidatearrayvalue-paramname-component_6","title":"ValidationUtils.validateArray(value, paramName, [component])","text":"<p>Validate that a value is an array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not an array</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatestringvalue-paramname-component-allowempty_6","title":"ValidationUtils.validateString(value, paramName, [component], [allowEmpty])","text":"<p>Validate that a value is a string</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a string or is empty when not allowed</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> [allowEmpty] <code>boolean</code> <code>false</code> <p>Whether to allow empty strings</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebooleanvalue-paramname-component_6","title":"ValidationUtils.validateBoolean(value, paramName, [component])","text":"<p>Validate that a value is a boolean</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a boolean</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefunctionvalue-paramname-component_6","title":"ValidationUtils.validateFunction(value, paramName, [component])","text":"<p>Validate that a value is a function</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a function</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateobjectvalue-paramname-component_6","title":"ValidationUtils.validateObject(value, paramName, [component])","text":"<p>Validate that a value is an object (not null, not array)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a plain object</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateworkerworker-component_6","title":"ValidationUtils.validateWorker(worker, [component])","text":"<p>Validate Worker instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If worker is not valid</p></li> </ul> Param Type Default Description worker <code>any</code> <p>Worker to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepyodidepyodide-component_6","title":"ValidationUtils.validatePyodide(pyodide, [component])","text":"<p>Validate Pyodide instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If pyodide is not valid</p></li> </ul> Param Type Default Description pyodide <code>any</code> <p>Pyodide instance to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefilestoloadfilestoload-component_6","title":"ValidationUtils.validateFilesToLoad(filesToLoad, [component])","text":"<p>Validate file objects array for FileLoader</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any file object is invalid</p></li> </ul> Param Type Default Description filesToLoad <code>Array</code> <p>Array of file objects</p> [component] <code>string</code> <code>\"PyodideFileLoader\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepackagespackages-component_6","title":"ValidationUtils.validatePackages(packages, [component])","text":"<p>Validate packages array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If packages array is invalid</p></li> </ul> Param Type Default Description packages <code>Array</code> <p>Array of package names</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatenamespacenamespace-component_6","title":"ValidationUtils.validateNamespace(namespace, [component])","text":"<p>Validate namespace object (optional parameter)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If namespace is provided but invalid</p></li> </ul> Param Type Default Description namespace <code>any</code> <p>Namespace to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateexecutionparamsfilename-code-namespace-component_6","title":"ValidationUtils.validateExecutionParams(filename, code, [namespace], [component])","text":"<p>Validate execution parameters</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any parameter is invalid</p></li> </ul> Param Type Default Description filename <code>string</code> <p>Filename for execution</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>any</code> <p>Optional namespace</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilscheckdangerouspatternscode-arraystring_6","title":"ValidationUtils.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code>","text":"<p>Check for potentially dangerous Python code patterns</p> <p>Kind: static method of <code>ValidationUtils</code> Returns: <code>Array.&lt;string&gt;</code> - <p>Array of dangerous patterns found</p> </p> Param Type Description code <code>string</code> <p>Python code to check</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebackendbackend-component_6","title":"ValidationUtils.validateBackend(backend, [component])","text":"<p>Validate backend parameter (must be 'pyodide' or &lt;?&gt;)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If backend is not valid</p></li> </ul> Param Type Default Description backend <code>string</code> <p>Backend to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatearrayvalue-paramname-component_7","title":"ValidationUtils.validateArray(value, paramName, [component])","text":"<p>Validate that a value is an array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not an array</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatestringvalue-paramname-component-allowempty_7","title":"ValidationUtils.validateString(value, paramName, [component], [allowEmpty])","text":"<p>Validate that a value is a string</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a string or is empty when not allowed</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> [allowEmpty] <code>boolean</code> <code>false</code> <p>Whether to allow empty strings</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebooleanvalue-paramname-component_7","title":"ValidationUtils.validateBoolean(value, paramName, [component])","text":"<p>Validate that a value is a boolean</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a boolean</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefunctionvalue-paramname-component_7","title":"ValidationUtils.validateFunction(value, paramName, [component])","text":"<p>Validate that a value is a function</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a function</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateobjectvalue-paramname-component_7","title":"ValidationUtils.validateObject(value, paramName, [component])","text":"<p>Validate that a value is an object (not null, not array)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If value is not a plain object</p></li> </ul> Param Type Default Description value <code>any</code> <p>Value to validate</p> paramName <code>string</code> <p>Parameter name for error messages</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateworkerworker-component_7","title":"ValidationUtils.validateWorker(worker, [component])","text":"<p>Validate Worker instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If worker is not valid</p></li> </ul> Param Type Default Description worker <code>any</code> <p>Worker to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepyodidepyodide-component_7","title":"ValidationUtils.validatePyodide(pyodide, [component])","text":"<p>Validate Pyodide instance</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If pyodide is not valid</p></li> </ul> Param Type Default Description pyodide <code>any</code> <p>Pyodide instance to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatefilestoloadfilestoload-component_7","title":"ValidationUtils.validateFilesToLoad(filesToLoad, [component])","text":"<p>Validate file objects array for FileLoader</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any file object is invalid</p></li> </ul> Param Type Default Description filesToLoad <code>Array</code> <p>Array of file objects</p> [component] <code>string</code> <code>\"PyodideFileLoader\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatepackagespackages-component_7","title":"ValidationUtils.validatePackages(packages, [component])","text":"<p>Validate packages array</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If packages array is invalid</p></li> </ul> Param Type Default Description packages <code>Array</code> <p>Array of package names</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatenamespacenamespace-component_7","title":"ValidationUtils.validateNamespace(namespace, [component])","text":"<p>Validate namespace object (optional parameter)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If namespace is provided but invalid</p></li> </ul> Param Type Default Description namespace <code>any</code> <p>Namespace to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidateexecutionparamsfilename-code-namespace-component_7","title":"ValidationUtils.validateExecutionParams(filename, code, [namespace], [component])","text":"<p>Validate execution parameters</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If any parameter is invalid</p></li> </ul> Param Type Default Description filename <code>string</code> <p>Filename for execution</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>any</code> <p>Optional namespace</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilscheckdangerouspatternscode-arraystring_7","title":"ValidationUtils.checkDangerousPatterns(code) \u21d2 <code>Array.&lt;string&gt;</code>","text":"<p>Check for potentially dangerous Python code patterns</p> <p>Kind: static method of <code>ValidationUtils</code> Returns: <code>Array.&lt;string&gt;</code> - <p>Array of dangerous patterns found</p> </p> Param Type Description code <code>string</code> <p>Python code to check</p> <p></p>"},{"location":"api-reference/#validationutilsvalidatebackendbackend-component_7","title":"ValidationUtils.validateBackend(backend, [component])","text":"<p>Validate backend parameter (must be 'pyodide' or &lt;?&gt;)</p> <p>Kind: static method of <code>ValidationUtils</code> Throws:</p> <ul> <li><code>Error</code> <p>If backend is not valid</p></li> </ul> Param Type Default Description backend <code>string</code> <p>Backend to validate</p> [component] <code>string</code> <code>\"Component\"</code> <p>Component name for error context</p> <p></p>"},{"location":"api-reference/#validationutilsvalidationerror-object_2","title":"ValidationUtils~ValidationError : <code>Object</code>","text":"<p>Kind: inner typedef of <code>ValidationUtils</code> Properties</p> Name Type Description message <code>string</code> <p>Error message</p> component <code>string</code> <p>Component that threw the error</p> parameter <code>string</code> <p>Parameter that failed validation</p> <p></p>"},{"location":"api-reference/#validationutilsvalidationerror-object_3","title":"ValidationUtils~ValidationError : <code>Object</code>","text":"<p>Kind: inner typedef of <code>ValidationUtils</code> Properties</p> Name Type Description message <code>string</code> <p>Error message</p> component <code>string</code> <p>Component that threw the error</p> parameter <code>string</code> <p>Parameter that failed validation</p> <p></p>"},{"location":"api-reference/#brythonmanager","title":"BrythonManager","text":"<p>BrythonManager \u2013 Minimal backend for Nagini focused on turtle graphics. Provides the same public surface as PyodideManager but runs directly in the main thread with Brython.  Input(), packages, and filesystem are NOT supported for now.</p> <p>Kind: global class </p>"},{"location":"api-reference/#pyodidefileloader","title":"PyodideFileLoader","text":"<p>PyodideFileLoader class for loading files into Pyodide filesystem</p> <p>Kind: global class  </p> <ul> <li>PyodideFileLoader<ul> <li>new PyodideFileLoader(filesToLoad)</li> <li>.loadFiles(pyodide, [options]) \u21d2 <code>Promise.&lt;void&gt;</code></li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#new-pyodidefileloaderfilestoload","title":"new PyodideFileLoader(filesToLoad)","text":"<p>Create a new PyodideFileLoader instance</p> <p>Throws:</p> <ul> <li><code>Error</code> <p>If filesToLoad is not an array or contains invalid objects</p></li> </ul> Param Type Description filesToLoad <code>Array.&lt;FileToLoad&gt;</code> <p>Array of file objects to load</p> <p></p>"},{"location":"api-reference/#pyodidefileloaderloadfilespyodide-options-promisevoid","title":"pyodideFileLoader.loadFiles(pyodide, [options]) \u21d2 <code>Promise.&lt;void&gt;</code>","text":"<p>Load files into Pyodide filesystem with retry mechanism</p> <p>Kind: instance method of <code>PyodideFileLoader</code> Throws:</p> <ul> <li><code>Error</code> <p>If file loading fails after all retries</p></li> </ul> Param Type Description pyodide <code>PyodideAPI</code> <p>Pyodide instance</p> [options] <code>LoadOptions</code> <p>Loading options</p> <p></p>"},{"location":"api-reference/#pyodidemanagerfs","title":"PyodideManagerFS","text":"<p>Static class containing filesystem functionality for PyodideManager</p> <p>Kind: global class  </p> <ul> <li>PyodideManagerFS<ul> <li>.fs(manager, operation, params) \u21d2 <code>Promise.&lt;any&gt;</code></li> <li>.writeFile(manager, path, content) \u21d2 <code>Promise.&lt;Object&gt;</code></li> <li>.readFile(manager, path) \u21d2 <code>Promise.&lt;string&gt;</code></li> <li>.mkdir(manager, path) \u21d2 <code>Promise.&lt;Object&gt;</code></li> <li>.exists(manager, path) \u21d2 <code>Promise.&lt;boolean&gt;</code></li> <li>.listdir(manager, path) \u21d2 <code>Promise.&lt;Array.&lt;string&gt;&gt;</code></li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#pyodidemanagerfsfsmanager-operation-params-promiseany","title":"PyodideManagerFS.fs(manager, operation, params) \u21d2 <code>Promise.&lt;any&gt;</code>","text":"<p>Filesystem operations proxy - main public interface</p> <p>Kind: static method of <code>PyodideManagerFS</code> Returns: <code>Promise.&lt;any&gt;</code> - <p>Operation result</p> Throws:</p> <ul> <li><code>Error</code> <p>If operation fails or times out</p></li> </ul> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> operation <code>FSOperation</code> <p>FS operation: 'writeFile', 'readFile', 'mkdir', 'exists', 'listdir'</p> params <code>FSOperationParams</code> <p>Operation parameters</p> <p></p>"},{"location":"api-reference/#pyodidemanagerfswritefilemanager-path-content-promiseobject","title":"PyodideManagerFS.writeFile(manager, path, content) \u21d2 <code>Promise.&lt;Object&gt;</code>","text":"<p>Write file to Pyodide filesystem</p> <p>Kind: static method of <code>PyodideManagerFS</code> Returns: <code>Promise.&lt;Object&gt;</code> - <p>Operation result</p> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> path <code>string</code> <p>File path</p> content <code>string</code> <p>File content</p> <p></p>"},{"location":"api-reference/#pyodidemanagerfsreadfilemanager-path-promisestring","title":"PyodideManagerFS.readFile(manager, path) \u21d2 <code>Promise.&lt;string&gt;</code>","text":"<p>Read file from Pyodide filesystem</p> <p>Kind: static method of <code>PyodideManagerFS</code> Returns: <code>Promise.&lt;string&gt;</code> - <p>File content</p> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> path <code>string</code> <p>File path</p> <p></p>"},{"location":"api-reference/#pyodidemanagerfsmkdirmanager-path-promiseobject","title":"PyodideManagerFS.mkdir(manager, path) \u21d2 <code>Promise.&lt;Object&gt;</code>","text":"<p>Create directory in Pyodide filesystem</p> <p>Kind: static method of <code>PyodideManagerFS</code> Returns: <code>Promise.&lt;Object&gt;</code> - <p>Operation result</p> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> path <code>string</code> <p>Directory path</p> <p></p>"},{"location":"api-reference/#pyodidemanagerfsexistsmanager-path-promiseboolean","title":"PyodideManagerFS.exists(manager, path) \u21d2 <code>Promise.&lt;boolean&gt;</code>","text":"<p>Check if path exists in Pyodide filesystem</p> <p>Kind: static method of <code>PyodideManagerFS</code> Returns: <code>Promise.&lt;boolean&gt;</code> - <p>True if exists, false otherwise</p> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> path <code>string</code> <p>Path to check</p> <p></p>"},{"location":"api-reference/#pyodidemanagerfslistdirmanager-path-promisearraystring","title":"PyodideManagerFS.listdir(manager, path) \u21d2 <code>Promise.&lt;Array.&lt;string&gt;&gt;</code>","text":"<p>List directory contents in Pyodide filesystem</p> <p>Kind: static method of <code>PyodideManagerFS</code> Returns: <code>Promise.&lt;Array.&lt;string&gt;&gt;</code> - <p>Array of file/directory names</p> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> path <code>string</code> <p>Directory path</p> <p></p>"},{"location":"api-reference/#pyodidemanagerinput","title":"PyodideManagerInput","text":"<p>Static class containing input handling functionality for PyodideManager</p> <p>Kind: global class  </p> <ul> <li>PyodideManagerInput<ul> <li>.initializeInputState(manager) \u21d2 <code>void</code></li> <li>.provideInput(manager, input) \u21d2 <code>void</code></li> <li>.queueInput(manager, input) \u21d2 <code>void</code></li> <li>.setInputCallback(manager, callback) \u21d2 <code>void</code></li> <li>.isWaitingForInput(manager) \u21d2 <code>boolean</code></li> <li>.getCurrentPrompt(manager) \u21d2 <code>string</code></li> <li>.handleInputMessage(manager, data) \u21d2 <code>void</code></li> <li>.resetInputState(manager) \u21d2 <code>void</code></li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#pyodidemanagerinputinitializeinputstatemanager-void","title":"PyodideManagerInput.initializeInputState(manager) \u21d2 <code>void</code>","text":"<p>Initialize input state for a PyodideManager instance</p> <p>Kind: static method of <code>PyodideManagerInput</code> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance to initialize</p> <p></p>"},{"location":"api-reference/#pyodidemanagerinputprovideinputmanager-input-void","title":"PyodideManagerInput.provideInput(manager, input) \u21d2 <code>void</code>","text":"<p>Provide input to Python code that's waiting for input</p> <p>Kind: static method of <code>PyodideManagerInput</code> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> input <code>string</code> <p>The input value to provide</p> <p></p>"},{"location":"api-reference/#pyodidemanagerinputqueueinputmanager-input-void","title":"PyodideManagerInput.queueInput(manager, input) \u21d2 <code>void</code>","text":"<p>Queue input for later provision when Python code requests it</p> <p>Kind: static method of <code>PyodideManagerInput</code> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> input <code>string</code> <p>The input value to queue</p> <p></p>"},{"location":"api-reference/#pyodidemanagerinputsetinputcallbackmanager-callback-void","title":"PyodideManagerInput.setInputCallback(manager, callback) \u21d2 <code>void</code>","text":"<p>Set a callback function to be called when input is required</p> <p>Kind: static method of <code>PyodideManagerInput</code> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> callback <code>function</code> <p>Function to call when input is needed</p> <p></p>"},{"location":"api-reference/#pyodidemanagerinputiswaitingforinputmanager-boolean","title":"PyodideManagerInput.isWaitingForInput(manager) \u21d2 <code>boolean</code>","text":"<p>Check if Python code is currently waiting for input</p> <p>Kind: static method of <code>PyodideManagerInput</code> Returns: <code>boolean</code> - <p>True if waiting for input, false otherwise</p> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> <p></p>"},{"location":"api-reference/#pyodidemanagerinputgetcurrentpromptmanager-string","title":"PyodideManagerInput.getCurrentPrompt(manager) \u21d2 <code>string</code>","text":"<p>Get the current input prompt if waiting for input</p> <p>Kind: static method of <code>PyodideManagerInput</code> Returns: <code>string</code> - <p>Current input prompt or empty string</p> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> <p></p>"},{"location":"api-reference/#pyodidemanagerinputhandleinputmessagemanager-data-void","title":"PyodideManagerInput.handleInputMessage(manager, data) \u21d2 <code>void</code>","text":"<p>Handle input-related message from worker</p> <p>Kind: static method of <code>PyodideManagerInput</code> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> data <code>Object</code> <p>Message data from worker</p> <p></p>"},{"location":"api-reference/#pyodidemanagerinputresetinputstatemanager-void","title":"PyodideManagerInput.resetInputState(manager) \u21d2 <code>void</code>","text":"<p>Reset input state (called on execution completion)</p> <p>Kind: static method of <code>PyodideManagerInput</code> </p> Param Type Description manager <code>PyodideManager</code> <p>Manager instance</p> <p></p>"},{"location":"api-reference/#pyodidemanager","title":"PyodideManager","text":"<p>Kind: global class  </p> <ul> <li>PyodideManager<ul> <li>new PyodideManager(packages, micropipPackages, filesToLoad, workerPath)</li> <li>.worker : <code>Worker</code> | <code>null</code></li> <li>.executionHistory : <code>Array.&lt;ExecutionResult&gt;</code></li> <li>.isReady : <code>boolean</code></li> <li>.packages : <code>Array.&lt;string&gt;</code></li> <li>.micropipPackages : <code>Array.&lt;string&gt;</code></li> <li>.filesToLoad : <code>Array.&lt;FileToLoad&gt;</code></li> <li>.workerPath : <code>string</code></li> <li>.blobUrl : <code>string</code> | <code>null</code></li> <li>.validateAndFilterPackages(packages) \u21d2 <code>Array.&lt;string&gt;</code></li> <li>.handleMessage(data) \u21d2 <code>void</code></li> <li>.setHandleMessage([newHandler]) \u21d2 <code>function</code></li> <li>.getHandleMessage() \u21d2 <code>function</code></li> <li>.executeFile(filename, code, [namespace]) \u21d2 <code>void</code></li> <li>.executeAsync(filename, code, [namespace]) \u21d2 <code>Promise.&lt;ExecutionResult&gt;</code></li> <li>.clearExecutionHistory() \u21d2 <code>void</code></li> <li>.destroy() \u21d2 <code>void</code></li> </ul> </li> </ul> <p></p>"},{"location":"api-reference/#new-pyodidemanagerpackages-micropippackages-filestoload-workerpath","title":"new PyodideManager(packages, micropipPackages, filesToLoad, workerPath)","text":"<p>Create a new PyodideManager instance</p> <p>Throws:</p> <ul> <li><code>Error</code> <p>If any parameter has incorrect type or worker is not bundled</p></li> </ul> Param Type Description packages <code>Array.&lt;string&gt;</code> <p>Array of Python package names to install</p> micropipPackages <code>Array.&lt;string&gt;</code> <p>Array of Python package names to install with micropip</p> filesToLoad <code>Array.&lt;FileToLoad&gt;</code> <p>Array of file objects to load into filesystem</p> workerPath <code>string</code> <p>Path to the bundled web worker file (must be worker-dist.js)</p> <p></p>"},{"location":"api-reference/#pyodidemanagerworker-worker-null","title":"pyodideManager.worker : <code>Worker</code> | <code>null</code>","text":"<p>Web worker instance</p> <p>Kind: instance property of <code>PyodideManager</code> </p>"},{"location":"api-reference/#pyodidemanagerexecutionhistory-arrayexecutionresult","title":"pyodideManager.executionHistory : <code>Array.&lt;ExecutionResult&gt;</code>","text":"<p>Execution history with results and metadata</p> <p>Kind: instance property of <code>PyodideManager</code> </p>"},{"location":"api-reference/#pyodidemanagerisready-boolean","title":"pyodideManager.isReady : <code>boolean</code>","text":"<p>Whether Pyodide is ready for execution</p> <p>Kind: instance property of <code>PyodideManager</code> </p>"},{"location":"api-reference/#pyodidemanagerpackages-arraystring","title":"pyodideManager.packages : <code>Array.&lt;string&gt;</code>","text":"<p>Python packages to install during initialization - filtered and validated</p> <p>Kind: instance property of <code>PyodideManager</code> </p>"},{"location":"api-reference/#pyodidemanagermicropippackages-arraystring","title":"pyodideManager.micropipPackages : <code>Array.&lt;string&gt;</code>","text":"<p>Python packages to install with micropip - filtered and validated</p> <p>Kind: instance property of <code>PyodideManager</code> </p>"},{"location":"api-reference/#pyodidemanagerfilestoload-arrayfiletoload","title":"pyodideManager.filesToLoad : <code>Array.&lt;FileToLoad&gt;</code>","text":"<p>Files to load into Pyodide filesystem</p> <p>Kind: instance property of <code>PyodideManager</code> </p>"},{"location":"api-reference/#pyodidemanagerworkerpath-string","title":"pyodideManager.workerPath : <code>string</code>","text":"<p>Path to the bundled web worker file</p> <p>Kind: instance property of <code>PyodideManager</code> </p>"},{"location":"api-reference/#pyodidemanagerbloburl-string-null","title":"pyodideManager.blobUrl : <code>string</code> | <code>null</code>","text":"<p>Blob URL for cleanup</p> <p>Kind: instance property of <code>PyodideManager</code> </p>"},{"location":"api-reference/#pyodidemanagervalidateandfilterpackagespackages-arraystring","title":"pyodideManager.validateAndFilterPackages(packages) \u21d2 <code>Array.&lt;string&gt;</code>","text":"<p>Validate and filter Python packages</p> <p>Kind: instance method of <code>PyodideManager</code> Returns: <code>Array.&lt;string&gt;</code> - <p>Validated and filtered package names</p> </p> Param Type Description packages <code>Array.&lt;string&gt;</code> <p>Array of package names to validate</p> <p></p>"},{"location":"api-reference/#pyodidemanagerhandlemessagedata-void","title":"pyodideManager.handleMessage(data) \u21d2 <code>void</code>","text":"<p>Handle messages from the Pyodide worker Updates UI status and manages execution context</p> <p>Kind: instance method of <code>PyodideManager</code> </p> Param Type Description data <code>WorkerMessage</code> <p>Message from worker</p> <p></p>"},{"location":"api-reference/#pyodidemanagersethandlemessagenewhandler-function","title":"pyodideManager.setHandleMessage([newHandler]) \u21d2 <code>function</code>","text":"<p>Get or set the current message handler</p> <p>Kind: instance method of <code>PyodideManager</code> Returns: <code>function</code> - <p>Current message handler</p> </p> Param Type Description [newHandler] <code>function</code> <p>New message handler to set</p> <p></p>"},{"location":"api-reference/#pyodidemanagergethandlemessage-function","title":"pyodideManager.getHandleMessage() \u21d2 <code>function</code>","text":"<p>Get the current message handler</p> <p>Kind: instance method of <code>PyodideManager</code> Returns: <code>function</code> - <p>Current message handler</p> </p>"},{"location":"api-reference/#pyodidemanagerexecutefilefilename-code-namespace-void","title":"pyodideManager.executeFile(filename, code, [namespace]) \u21d2 <code>void</code>","text":"<p>Execute Python code in the worker with optional namespace isolation</p> <p>Kind: instance method of <code>PyodideManager</code> Returns: <code>void</code> - <ul> <li>No return value, sends message to worker</li> <p> </p> Param Type Description filename <code>string</code> <p>Name for this execution (for tracking and debugging)</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>Object</code> | <code>undefined</code> <p>Optional namespace object for Python execution</p> <p></p>"},{"location":"api-reference/#pyodidemanagerexecuteasyncfilename-code-namespace-promiseexecutionresult","title":"pyodideManager.executeAsync(filename, code, [namespace]) \u21d2 <code>Promise.&lt;ExecutionResult&gt;</code>","text":"<p>Execute Python code asynchronously and return a Promise with the result</p> <p>Kind: instance method of <code>PyodideManager</code> Returns: <code>Promise.&lt;ExecutionResult&gt;</code> - <p>Promise that resolves with execution result</p> Throws:</p> <ul> <li><code>Error</code> <p>If manager is not ready or execution times out</p></li> </ul> Param Type Description filename <code>string</code> <p>Name for this execution (for tracking and debugging)</p> code <code>string</code> <p>Python code to execute</p> [namespace] <code>Object</code> | <code>undefined</code> <p>Optional namespace object for Python execution</p> <p></p>"},{"location":"api-reference/#pyodidemanagerclearexecutionhistory-void","title":"pyodideManager.clearExecutionHistory() \u21d2 <code>void</code>","text":"<p>Clear execution history context</p> <p>Kind: instance method of <code>PyodideManager</code> </p>"},{"location":"api-reference/#pyodidemanagerdestroy-void","title":"pyodideManager.destroy() \u21d2 <code>void</code>","text":"<p>Cleanup resources and terminate worker Call this when the manager is no longer needed to prevent memory leaks</p> <p>Kind: instance method of <code>PyodideManager</code> </p>"},{"location":"api-reference/#createblobworkerurlworkerurl-promisestring","title":"createBlobWorkerUrl(workerUrl) \u21d2 <code>Promise.&lt;string&gt;</code>","text":"<p>Create a blob worker URL from a bundled worker script</p> <p>Kind: global function Returns: <code>Promise.&lt;string&gt;</code> - <p>Blob URL that can be used to create a Worker</p> Throws:</p> <ul> <li><code>Error</code> <p>If worker script cannot be fetched</p></li> </ul> Param Type Description workerUrl <code>string</code> <p>URL to the bundled worker script (worker-dist.js)</p> <p></p>"},{"location":"api-reference/#createblobworkerworkerurl-promiseworker","title":"createBlobWorker(workerUrl) \u21d2 <code>Promise.&lt;Worker&gt;</code>","text":"<p>Create a Worker instance using blob URL pattern</p> <p>Kind: global function Returns: <code>Promise.&lt;Worker&gt;</code> - <p>Web Worker instance created from blob URL</p> Throws:</p> <ul> <li><code>Error</code> <p>If worker creation fails</p></li> </ul> Param Type Description workerUrl <code>string</code> <p>URL to the bundled worker script (worker-dist.js)</p> <p></p>"},{"location":"api-reference/#revokebloburlbloburl","title":"revokeBlobUrl(blobUrl)","text":"<p>Cleanup blob URL to prevent memory leaks</p> <p>Kind: global function  </p> Param Type Description blobUrl <code>string</code> <p>Blob URL to revoke</p> <p></p>"},{"location":"api-reference/#executeasync","title":"executeAsync()","text":"<p>Execute Python code with Brython, capturing stdout, stderr and missive. Renamed from brython-executor.js</p> <p>Kind: global function </p>"},{"location":"api-reference/#createblobworkerurlworkerurl-promisestring_1","title":"createBlobWorkerUrl(workerUrl) \u21d2 <code>Promise.&lt;string&gt;</code>","text":"<p>Create a blob worker URL from a bundled worker script</p> <p>Kind: global function Returns: <code>Promise.&lt;string&gt;</code> - <p>Blob URL that can be used to create a Worker</p> Throws:</p> <ul> <li><code>Error</code> <p>If worker script cannot be fetched</p></li> </ul> Param Type Description workerUrl <code>string</code> <p>URL to the bundled worker script (worker-dist.js)</p> <p></p>"},{"location":"api-reference/#createblobworkerworkerurl-promiseworker_1","title":"createBlobWorker(workerUrl) \u21d2 <code>Promise.&lt;Worker&gt;</code>","text":"<p>Create a Worker instance using blob URL pattern</p> <p>Kind: global function Returns: <code>Promise.&lt;Worker&gt;</code> - <p>Web Worker instance created from blob URL</p> Throws:</p> <ul> <li><code>Error</code> <p>If worker creation fails</p></li> </ul> Param Type Description workerUrl <code>string</code> <p>URL to the bundled worker script (worker-dist.js)</p> <p></p>"},{"location":"api-reference/#revokebloburlbloburl_1","title":"revokeBlobUrl(blobUrl)","text":"<p>Cleanup blob URL to prevent memory leaks</p> <p>Kind: global function  </p> Param Type Description blobUrl <code>string</code> <p>Blob URL to revoke</p> <p></p>"},{"location":"api-reference/#filetoload-object","title":"FileToLoad : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description url <code>string</code> <p>URL to fetch the file from (supports S3, HTTP, local paths)</p> path <code>string</code> <p>Target path in Pyodide filesystem where file should be saved</p> <p></p>"},{"location":"api-reference/#loadoptions-object","title":"LoadOptions : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Default Description [maxRetries] <code>number</code> <code>3</code> <p>Maximum number of retry attempts for failed downloads</p> [retryDelay] <code>number</code> <code>1000</code> <p>Base delay in milliseconds between retries</p> <p></p>"},{"location":"api-reference/#pyodideapi-object","title":"PyodideAPI : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description FS <code>Object</code> <p>Pyodide filesystem interface</p> FS.writeFile <code>function</code> <p>Write file to filesystem</p> FS.analyzePath <code>function</code> <p>Analyze path existence</p> FS.mkdir <code>function</code> <p>Create directory</p> <p></p>"},{"location":"api-reference/#fsoperation-writefile-readfile-mkdir-exists-listdir","title":"FSOperation : <code>'writeFile'</code> | <code>'readFile'</code> | <code>'mkdir'</code> | <code>'exists'</code> | <code>'listdir'</code>","text":"<p>Kind: global typedef </p>"},{"location":"api-reference/#fsoperationparams-object","title":"FSOperationParams : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description path <code>string</code> <p>File or directory path</p> [content] <code>string</code> <p>File content (for writeFile operation)</p> <p></p>"},{"location":"api-reference/#fsoperationresult-object","title":"FSOperationResult : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description [success] <code>boolean</code> <p>Whether operation succeeded</p> [content] <code>string</code> <p>File content (for readFile)</p> [exists] <code>boolean</code> <p>Whether file/directory exists</p> [files] <code>Array.&lt;string&gt;</code> <p>Directory contents (for listdir)</p> <p></p>"},{"location":"api-reference/#executionresult-object","title":"ExecutionResult : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description filename <code>string</code> <p>Name of the executed file</p> time <code>number</code> <p>Execution time in milliseconds</p> stdout <code>string</code> <p>Standard output from Python execution</p> stderr <code>string</code> <p>Standard error from Python execution</p> missive <code>Object</code> | <code>null</code> <p>Structured JSON data from Python</p> figures <code>Array.&lt;string&gt;</code> <p>Base64 encoded matplotlib figures</p> error <code>Object</code> | <code>null</code> <p>JavaScript execution error object</p> timestamp <code>string</code> <p>ISO timestamp of execution</p> [executedWithNamespace] <code>boolean</code> <p>Whether execution used namespace</p> <p></p>"},{"location":"api-reference/#filetoload-object_1","title":"FileToLoad : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description path <code>string</code> <p>Path where file should be saved in filesystem</p> content <code>string</code> <p>File content to write</p> [encoding] <code>string</code> <p>File encoding (default: 'utf8')</p> <p></p>"},{"location":"api-reference/#workermessage-object","title":"WorkerMessage : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description type <code>'ready'</code> | <code>'error'</code> | <code>'warning'</code> | <code>'info'</code> | <code>'result'</code> | <code>'fs_result'</code> | <code>'fs_error'</code> <p>Message type</p> [message] <code>string</code> <p>Message content</p> [error] <code>string</code> <p>Error message</p> [filename] <code>string</code> <p>Filename for execution results</p> [time] <code>number</code> <p>Execution time in milliseconds</p> [stdout] <code>string</code> <p>Standard output</p> [stderr] <code>string</code> <p>Standard error</p> [missive] <code>Object</code> | <code>null</code> <p>Structured data from Python</p> [error] <code>Object</code> | <code>null</code> <p>Execution error object</p> [result] <code>any</code> <p>Filesystem operation result</p> <p></p>"},{"location":"api-reference/#executionresult-object_1","title":"ExecutionResult : <code>Object</code>","text":"<p>Kind: global typedef Properties</p> Name Type Description filename <code>string</code> <p>Name of the executed file</p> time <code>number</code> <p>Execution time in milliseconds</p> stdout <code>string</code> <p>Standard output from Python execution</p> stderr <code>string</code> <p>Standard error from Python execution</p> missive <code>Object</code> | <code>null</code> <p>Structured JSON data from Python</p> error <code>Object</code> | <code>null</code> <p>JavaScript execution error object</p> timestamp <code>string</code> <p>ISO timestamp of execution</p> [executedWithNamespace] <code>boolean</code> <p>Whether execution used namespace</p>"},{"location":"docs/","title":"Nagini Documentation","text":"<p>Complete Guide to Python-in-Browser Execution via Pyodide</p>"},{"location":"docs/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Architecture</li> <li>API Reference</li> <li>Features</li> <li>Testing</li> <li>Development</li> <li>Licensing</li> <li>Troubleshooting</li> </ol>"},{"location":"docs/#overview","title":"Overview","text":"<p>Nagini is a production-ready Python execution system for web browsers supporting two backends: Pyodide WebAssembly (full-featured with automatic blob workers) and Brython (lightweight JavaScript transpilation). It provides a clean, modular architecture with worker-based execution for Pyodide, interactive input handling, matplotlib visualization, and remote module loading capabilities.</p>"},{"location":"docs/#use-cases","title":"Use Cases","text":"<p>Nagini enables a wide range of applications across different domains:</p> <ul> <li>Data Analysis &amp; Visualization: Interactive dashboards, scientific computing, statistical analysis</li> <li>Educational Platforms: Coding tutorials, interactive learning environments, programming courses</li> <li>Development Tools: Online IDEs, code playgrounds, prototyping environments, terminal interfaces</li> <li>Research Applications: Scientific simulations, data exploration, academic research tools</li> <li>Business Intelligence: Report generation, data processing, analytics platforms</li> <li>Training &amp; Consulting: Professional development tools, skill assessment platforms</li> </ul>"},{"location":"docs/#key-benefits","title":"Key Benefits","text":"<ul> <li>Dual Backend Support: Choose Pyodide (full-featured) or Brython (lightweight, instant startup)</li> <li>Automatic Blob Workers: Cross-origin compatibility for Pyodide (Flask, Django, etc.)</li> <li>Isolated Execution: Python runs in web workers (Pyodide) or main thread (Brython)</li> <li>Interactive Support: Natural <code>input()</code> function support with multiple interaction modes (Pyodide only)</li> <li>Visualization Ready: Automatic matplotlib figure capture and display (Pyodide only)</li> <li>Micropip Support: Install packages from PyPI using <code>micropip</code> (Pyodide only).</li> <li>Module Loading: Load Python modules from S3/URLs at runtime (Pyodide only)</li> <li>Namespace Isolation: Complete variable isolation between executions</li> <li>Unified Test Suite: Comprehensive side-by-side testing with tactical turtle graphics (Brython) and scientific computing (Pyodide)</li> <li>Cross-Origin Testing: Real-world Flask integration with automatic blob worker creation</li> <li>Open Source: Licensed under GNU Affero General Public License v3.0 (AGPL-3.0)</li> </ul>"},{"location":"docs/#architecture","title":"Architecture","text":""},{"location":"docs/#system-overview","title":"System Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                          Main Thread                            \u2502\n\u2502                                                                 \u2502\n\u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502    \u2502     Nagini      \u2502    \u2502       PyodideManager            \u2502   \u2502\n\u2502    \u2502                 \u2502    \u2502                                 \u2502   \u2502\n\u2502    \u2502 createManager() \u2502\u2500\u2500\u2500\u25ba\u2502 executeAsync()                  \u2502   \u2502\n\u2502    \u2502 waitForReady()  \u2502    \u2502 queueInput()                    \u2502   \u2502\n\u2502    \u2502 executeFromUrl()\u2502    \u2502 fs()                            \u2502   \u2502\n\u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502 setInputCallback()              \u2502   \u2502\n\u2502                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                            \u2502                    \u2502\n\u2502                                            \u2502                    \u2502\n\u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502    \u2502         PyodideManagerStaticExecutor                    \u2502  \u2502\n\u2502    \u2502                                                         \u2502  \u2502\n\u2502    \u2502 executeFile()     - Fire-and-forget execution           \u2502  \u2502\n\u2502    \u2502 executeAsync()    - Promise-based execution             \u2502  \u2502\n\u2502    \u2502                                                         \u2502  \u2502\n\u2502    \u2502 Static methods for pure, testable execution logic       \u2502  \u2502\n\u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2502\n  \u2502 postMessage()\n  \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Web Worker                               \u2502\n\u2502                                                                 \u2502\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502   \u2502 PyodideWorker   \u2502    \u2502   PyodideWorkerHandlers         \u2502    \u2502\n\u2502   \u2502                 \u2502    \u2502                                 \u2502    \u2502\n\u2502   \u2502 Entry Point     \u2502\u2500\u2500\u2500\u25ba\u2502 handleInit()                    \u2502    \u2502\n\u2502   \u2502 Dynamic Import  \u2502    \u2502 handleExecute()                 \u2502    \u2502\n\u2502   \u2502 State Mgmt      \u2502    \u2502 handleFSOperation()             \u2502    \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502 loadPackages()                  \u2502    \u2502\n\u2502                          \u2502 captureOutputs()                \u2502    \u2502\n\u2502                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                                           \u2502                     \u2502\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502   \u2502         PyodideWorkerConfig                             \u2502   \u2502\n\u2502   \u2502                                                         \u2502   \u2502\n\u2502   \u2502 PYODIDE_CDN: \"https://cdn.jsdelivr.net/pyodide/v0.28.0\" \u2502   \u2502\n\u2502   \u2502 MESSAGES: { error/warning/info constants }              \u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                                 \u2502\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502   \u2502              Pyodide Runtime                            \u2502   \u2502\n\u2502   \u2502                                                         \u2502   \u2502\n\u2502   \u2502 Python Interpreter + Standard Library                   \u2502   \u2502\n\u2502   \u2502 Package Management (pip/micropip)                       \u2502   \u2502\n\u2502   \u2502 Virtual Filesystem                                      \u2502   \u2502\n\u2502   \u2502 Matplotlib Backend                                      \u2502   \u2502\n\u2502   \u2502 Input/Output Capture System                             \u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/#component-responsibilities","title":"Component Responsibilities","text":""},{"location":"docs/#main-thread-components","title":"Main Thread Components","text":"<p>Nagini (High-Level API) - <code>createManager()</code> - Factory function for PyodideManager instances - <code>waitForReady()</code> - Initialization completion helper - <code>executeFromUrl()</code> - URL-based code execution</p> <p>PyodideManager (Core Manager) - Worker lifecycle management - Message routing and handling - Input queue and callback management - Filesystem operation proxying - Execution history tracking</p> <p>PyodideManagerStaticExecutor (Execution Logic) - Pure execution functions separated from manager state - <code>executeFile()</code> - Fire-and-forget execution - <code>executeAsync()</code> - Promise-based execution with results - Parameter validation and namespace handling</p>"},{"location":"docs/#worker-components","title":"Worker Components","text":"<p>PyodideWorker (Entry Point) - Worker initialization and state management - Dynamic import of handler modules - Message delegation to appropriate handlers</p> <p>PyodideWorkerHandlers (Business Logic) - <code>handleInit()</code> - Pyodide and package initialization - <code>handleExecute()</code> - Python code execution with namespace support - <code>handleFSOperation()</code> - Virtual filesystem operations - <code>loadPackages()</code> - Smart package loading with caching - <code>captureOutputs()</code> - stdout/stderr/matplotlib capture</p> <p>PyodideWorkerConfig (Configuration) - Centralized constants and error messages - Pyodide CDN version configuration - Message templates for consistent communication</p>"},{"location":"docs/#api-reference","title":"API Reference","text":""},{"location":"docs/#nagini-high-level-api","title":"Nagini (High-Level API)","text":""},{"location":"docs/#createmanagerbackend-packages-micropippackages-filestoload-workerpath","title":"<code>createManager(backend, packages, micropipPackages, filesToLoad, workerPath)</code>","text":"<p>Creates a new manager instance with strict type validation.</p> <p>Parameters: - <code>backend</code> (String): Backend to use ('pyodide' or 'brython'). - <code>packages</code> (Array): Pyodide packages to install from the standard channel (e.g., <code>[\"numpy\", \"pandas\"]</code>). - <code>micropipPackages</code> (Array): Python packages to install from PyPI using <code>micropip</code> (e.g., <code>[\"requests\", \"beautifulsoup4\"]</code>). - <code>filesToLoad</code> (Array): Files to load into the virtual filesystem. - <code>workerPath</code> (String): Path to the web worker file (for Pyodide).</p> <p>Returns: <code>PyodideManager</code> or <code>BrythonManager</code> instance.</p> <p>Example: <pre><code>const manager = await Nagini.createManager(\n    'pyodide',\n    [\"sympy\", \"matplotlib\"],\n    [\"antlr4-python3-runtime\"],\n    [\n        {\n            url: \"https://example.com/modules/utils.py\",\n            path: \"utils/utils.py\"\n        }\n    ],\n    \"./src/pyodide/worker/worker.js\"         // Development (ES6 modules)\n    // \"./src/pyodide/worker/worker-dist.js\" // Production (bundled)\n);\n</code></pre></p>"},{"location":"docs/#waitforreadymanager-timeout","title":"<code>waitForReady(manager, timeout)</code>","text":"<p>Waits for manager initialization to complete.</p> <p>Parameters: - <code>manager</code> (PyodideManager): Manager instance - <code>timeout</code> (Number): Timeout in milliseconds (default: 30000)</p> <p>Returns: <code>Promise&lt;void&gt;</code></p> <p>Example: <pre><code>await Nagini.waitForReady(manager, 60000); // 60 second timeout\n</code></pre></p>"},{"location":"docs/#executefromurlurl-manager-namespace","title":"<code>executeFromUrl(url, manager, namespace)</code>","text":"<p>Executes Python code from a URL with optional namespace isolation.</p> <p>Parameters: - <code>url</code> (String): URL to fetch Python code from - <code>manager</code> (PyodideManager): Manager instance - <code>namespace</code> (Object, optional): Execution namespace for isolation</p> <p>Returns: <code>Promise&lt;ExecutionResult&gt;</code></p> <p>Example: <pre><code>const result = await Nagini.executeFromUrl(\n    \"./scripts/analysis.py\", \n    manager,\n    { data: [1, 2, 3, 4, 5] }\n);\n</code></pre></p>"},{"location":"docs/#pyodidemanager-core-manager","title":"PyodideManager (Core Manager)","text":""},{"location":"docs/#executeasyncfilename-code-namespace","title":"<code>executeAsync(filename, code, namespace)</code>","text":"<p>Executes Python code asynchronously with comprehensive result tracking.</p> <p>Parameters: - <code>filename</code> (String): Name for tracking purposes - <code>code</code> (String): Python code to execute - <code>namespace</code> (Object, optional): Isolated namespace for execution</p> <p>Returns: <code>Promise&lt;ExecutionResult&gt;</code></p> <p>ExecutionResult Structure: <pre><code>{\n    filename: \"test.py\",\n    time: 125,                    // Execution time in milliseconds\n    stdout: \"Hello World\\n\",      // Standard output\n    stderr: \"\",                   // Standard error\n    missive: {\"result\": 42},      // Structured data from Python\n    figures: [\"base64...\"],       // Matplotlib figures as base64\n    error: null,                  // JavaScript execution errors\n    timestamp: \"2025-01-01T12:00:00.000Z\"\n}\n</code></pre></p> <p>Example: <pre><code>const result = await manager.executeAsync(\"analysis.py\", `\nimport numpy as np\ndata = np.array([1, 2, 3, 4, 5])\nmean = np.mean(data)\nprint(f\"Mean: {mean}\")\nmissive({\"mean\": mean, \"data_length\": len(data)})\n`);\n\nconsole.log(result.stdout);   // \"Mean: 3.0\"\nconsole.log(result.missive);  // {\"mean\": 3.0, \"data_length\": 5}\n</code></pre></p>"},{"location":"docs/#input-handling-methods","title":"Input Handling Methods","text":"<p><code>queueInput(input)</code> Queue input for automatic provision when Python code requests it.</p> <pre><code>manager.queueInput(\"Alice\");\nmanager.queueInput(\"25\");\n\nawait manager.executeAsync(\"survey.py\", `\nname = input(\"Name: \")\nage = int(input(\"Age: \"))\nprint(f\"{name} is {age} years old\")\n`);\n</code></pre> <p><code>setInputCallback(callback)</code> Set a callback function for interactive input handling.</p> <pre><code>manager.setInputCallback(async (prompt) =&gt; {\n    const userInput = window.prompt(prompt);\n    manager.provideInput(userInput);\n});\n</code></pre> <p><code>provideInput(input)</code> Provide input to waiting Python code.</p> <pre><code>manager.provideInput(\"user response\");\n</code></pre> <p><code>isWaitingForInput()</code> Check if Python code is currently waiting for input.</p> <pre><code>if (manager.isWaitingForInput()) {\n    const prompt = manager.getCurrentPrompt();\n    // Handle input request\n}\n</code></pre>"},{"location":"docs/#filesystem-operations","title":"Filesystem Operations","text":"<p><code>fs(operation, params)</code></p> <p>Perform filesystem operations in the Pyodide environment.</p> <p>Supported Operations: - <code>writeFile</code> - Write content to a file - <code>readFile</code> - Read file content - <code>mkdir</code> - Create directory - <code>exists</code> - Check if path exists - <code>listdir</code> - List directory contents</p> <p>Examples: <pre><code>// Write file\nawait manager.fs(\"writeFile\", {\n    path: \"data/config.json\",\n    content: JSON.stringify({model: \"gpt-4\", temperature: 0.7})\n});\n\n// Read file\nconst content = await manager.fs(\"readFile\", {\n    path: \"data/config.json\"\n});\n\n// Create directory\nawait manager.fs(\"mkdir\", {\n    path: \"data/output\"\n});\n\n// Check existence\nconst exists = await manager.fs(\"exists\", {\n    path: \"data/config.json\"\n});\n\n// List directory\nconst files = await manager.fs(\"listdir\", {\n    path: \"data\"\n});\n</code></pre></p>"},{"location":"docs/#properties","title":"Properties","text":"<ul> <li><code>isReady</code> (Boolean): Whether manager is ready for execution</li> <li><code>executionHistory</code> (Array): Complete execution history with metadata</li> <li><code>packages</code> (Array): List of installed packages</li> <li><code>filesToLoad</code> (Array): Files loaded into filesystem</li> <li><code>worker</code> (Worker): Web worker instance</li> <li><code>pyodideInitPath</code> (String): Path to Python initialization script</li> <li><code>workerPath</code> (String): Path to web worker file</li> </ul>"},{"location":"docs/#pyodidemanagerstaticexecutor","title":"PyodideManagerStaticExecutor","text":"<p>Static utility class containing pure execution logic extracted from PyodideManager.</p>"},{"location":"docs/#executefileworker-isready-filename-code-namespace","title":"<code>executeFile(worker, isReady, filename, code, namespace)</code>","text":"<p>Execute Python code without waiting for result (fire-and-forget).</p> <p>Parameters: - <code>worker</code> (Worker): Web worker instance - <code>isReady</code> (Boolean): Whether Pyodide is ready - <code>filename</code> (String): Name for tracking - <code>code</code> (String): Python code to execute - <code>namespace</code> (Object, optional): Execution namespace</p> <p>Returns: <code>void</code></p>"},{"location":"docs/#executeasyncworker-isready-executionhistory-sethandlemessage-gethandlemessage-filename-code-namespace","title":"<code>executeAsync(worker, isReady, executionHistory, setHandleMessage, getHandleMessage, filename, code, namespace)</code>","text":"<p>Execute Python code asynchronously with result tracking.</p> <p>Parameters: - <code>worker</code> (Worker): Web worker instance - <code>isReady</code> (Boolean): Whether Pyodide is ready - <code>executionHistory</code> (Array): History array for tracking - <code>setHandleMessage</code> (Function): Message handler setter - <code>getHandleMessage</code> (Function): Message handler getter - <code>filename</code> (String): Name for tracking - <code>code</code> (String): Python code to execute - <code>namespace</code> (Object, optional): Execution namespace</p> <p>Returns: <code>Promise&lt;ExecutionResult&gt;</code></p>"},{"location":"docs/#brythonmanager-lightweight-backend","title":"BrythonManager (Lightweight Backend)","text":"<p>The Brython backend executes Python by transpiling it to JavaScript directly in the main thread (no WebAssembly, no web-workers). It is great for lightweight demos such as turtle graphics but has several limitations compared to Pyodide.</p> <p>Key points - \u2705 Instant startup \u2013 no WASM download - \u2705 Same result object shape as Pyodide for <code>executeAsync</code> - \u26a0\ufe0f  No package installation (only Brython stdlib) - \u26a0\ufe0f  No <code>input()</code> queue / callbacks (methods are stubs that emit console warnings) - \u26a0\ufe0f  No virtual filesystem (<code>fs()</code> will throw) - \u26a0\ufe0f  Runs on the UI thread \u2013 long-running scripts will block the page</p>"},{"location":"docs/#executeasyncfilename-code","title":"<code>executeAsync(filename, code)</code>","text":"<p>Execute Python code and return a full <code>ExecutionResult</code> object (with <code>stdout</code>, <code>stderr</code>, <code>missive</code>, <code>time</code>, etc.).</p> <pre><code>const manager = await Nagini.createManager(\n    'brython',      // Use the Brython backend\n    [],             // packages ignored\n    [],             // micropipPackages ignored\n    [],             // filesToLoad ignored\n    ''              // workerPath ignored\n);\n\nawait Nagini.waitForReady(manager);\n\nconst result = await manager.executeAsync('demo.py', `\nfrom browser import document\nimport turtle\n\n# Simple square\npen = turtle.Turtle()\nfor _ in range(4):\n    pen.forward(100)\n    pen.right(90)\n\nprint('Finished drawing!')\n`);\n\nconsole.log(result.stdout); // \"Finished drawing!\\n\"\n</code></pre>"},{"location":"docs/#executefilefilename-code","title":"<code>executeFile(filename, code)</code>","text":"<p>Fire-and-forget wrapper around <code>executeAsync</code> (returns void).</p>"},{"location":"docs/#unsupported-stubbed-apis","title":"Unsupported / Stubbed APIs","text":"<pre><code>manager.fs();                 // \u279c Error: not supported\nmanager.queueInput('data');   // \u279c Console warning (ignored)\nmanager.setInputCallback(cb); // \u279c Console warning (ignored)\n</code></pre> <p>Properties available: <code>isReady</code>, <code>executionHistory</code>, <code>packages</code>.</p>"},{"location":"docs/#features","title":"Features","text":""},{"location":"docs/#interactive-input-system","title":"Interactive Input System","text":"<p>Nagini provides comprehensive support for Python's <code>input()</code> function with multiple interaction modes. The system is fully asynchronous, preventing the browser's UI from freezing while waiting for user input.</p> <p>How It Works: 1.  When <code>input()</code> is called in Python, the code is transformed to an <code>async</code> function. 2.  The worker sends an <code>input_required</code> message to the main thread and pauses its execution, waiting for a JavaScript promise to resolve. 3.  The main thread's <code>PyodideManager</code> receives this message and uses either the <code>inputQueue</code> or an <code>inputCallback</code> to get the required data. 4.  The main thread sends the data back to the worker via an <code>input_response</code> message. 5.  The worker resolves the pending promise, and the Python code resumes execution with the provided input.</p> <p>This asynchronous flow is critical for a non-blocking user experience.</p>"},{"location":"docs/#1-programmatic-input-queue","title":"1. Programmatic Input Queue","text":"<p>Pre-queue inputs for automated execution:</p> <pre><code>// Queue inputs before execution\nmanager.queueInput(\"Alice\");\nmanager.queueInput(\"25\");\nmanager.queueInput(\"Engineer\");\n\nconst result = await manager.executeAsync(\"survey.py\", `\nprint(\"Starting survey...\")\nname = input(\"What's your name? \")\nage = int(input(\"How old are you? \"))\njob = input(\"What's your job? \")\nprint(f\"Hello {name}, you're a {age}-year-old {job}!\")\n`);\n</code></pre>"},{"location":"docs/#2-interactive-callbacks","title":"2. Interactive Callbacks","text":"<p>Handle input requests in real-time:</p> <pre><code>manager.setInputCallback(async (prompt) =&gt; {\n    const userInput = window.prompt(prompt || 'Enter input:');\n    manager.provideInput(userInput);\n});\n\nconst result = await manager.executeAsync(\"interactive.py\", `\nname = input(\"Enter your name: \")\nprint(f\"Hello {name}!\")\n`);\n</code></pre>"},{"location":"docs/#3-custom-input-ui","title":"3. Custom Input UI","text":"<p>Build custom input interfaces:</p> <pre><code>manager.setInputCallback(async (prompt) =&gt; {\n    // Create custom input UI\n    const inputElement = document.createElement('input');\n    inputElement.placeholder = prompt;\n\n    // Add to DOM and wait for user interaction\n    document.body.appendChild(inputElement);\n\n    const userInput = await new Promise(resolve =&gt; {\n        inputElement.addEventListener('keypress', (e) =&gt; {\n            if (e.key === 'Enter') {\n                resolve(inputElement.value);\n                inputElement.remove();\n            }\n        });\n    });\n\n    manager.provideInput(userInput);\n});\n</code></pre>"},{"location":"docs/#matplotlib-integration","title":"Matplotlib Integration","text":"<p>Automatic figure capture and display:</p> <pre><code>const result = await manager.executeAsync(\"visualization.py\", `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create multiple figures\nfig1, ax1 = plt.subplots()\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax1.plot(x, y)\nax1.set_title(\"Sine Wave\")\n\nfig2, ax2 = plt.subplots()\ny2 = np.cos(x)\nax2.plot(x, y2)\nax2.set_title(\"Cosine Wave\")\n\nprint(\"Figures created successfully!\")\n`);\n\nconsole.log(result.figures.length); // 2\nresult.figures.forEach((base64, index) =&gt; {\n    const img = document.createElement('img');\n    img.src = `data:image/png;base64,${base64}`;\n    img.alt = `Figure ${index + 1}`;\n    document.body.appendChild(img);\n});\n</code></pre>"},{"location":"docs/#namespace-isolation","title":"Namespace Isolation","text":"<p>Complete isolation between executions:</p> <pre><code>// Namespace A\nconst namespaceA = { \n    value: \"A\", \n    multiplier: 2 \n};\n\nconst resultA = await manager.executeAsync(\"test_A.py\", `\nresult = value * multiplier\nlocal_var = \"only_in_A\"\nprint(f\"Result A: {result}\")\nmissive({\"result\": result, \"local_var\": local_var})\n`, namespaceA);\n\n// Namespace B (completely isolated)\nconst namespaceB = { \n    value: \"B\", \n    multiplier: 3 \n};\n\nconst resultB = await manager.executeAsync(\"test_B.py\", `\nresult = value * multiplier\nlocal_var = \"only_in_B\"\nprint(f\"Result B: {result}\")\nmissive({\"result\": result, \"local_var\": local_var})\n`, namespaceB);\n\n// Results are completely isolated\nconsole.log(resultA.missive); // {\"result\": \"AA\", \"local_var\": \"only_in_A\"}\nconsole.log(resultB.missive); // {\"result\": \"BBB\", \"local_var\": \"only_in_B\"}\n</code></pre>"},{"location":"docs/#missive-system","title":"Missive System","text":"<p>Structured data exchange between Python and JavaScript:</p> <pre><code># Python side - can only be called once per execution\nmissive({\n    \"results\": [1, 2, 3, 4, 5],\n    \"statistics\": {\n        \"mean\": 3.0,\n        \"median\": 3.0,\n        \"std\": 1.58\n    },\n    \"status\": \"success\"\n})\n\n# Calling missive() again raises ValueError\n# missive({\"another\": \"value\"})  # Error!\n</code></pre> <pre><code>// JavaScript side\nconst result = await manager.executeAsync(\"analysis.py\", pythonCode);\nconsole.log(result.missive.results);     // [1, 2, 3, 4, 5]\nconsole.log(result.missive.statistics);  // {mean: 3.0, median: 3.0, std: 1.58}\nconsole.log(result.missive.status);      // \"success\"\n</code></pre>"},{"location":"docs/#remote-module-loading","title":"Remote Module Loading","text":"<p>Load remote Python modules at runtime:</p> <pre><code>const filesToLoad = [\n    {\n        url: \"https://example.com/modules/analytics.py\",\n        path: \"analytics/analytics.py\"\n    },\n    {\n        url: \"https://example.com/modules/utils.py\",\n        path: \"analytics/utils.py\"\n    },\n    {\n        url: \"https://example.com/modules/__init__.py\",\n        path: \"analytics/__init__.py\"\n    }\n];\n\nconst manager = await Nagini.createManager(\n    'pyodide',\n    [\"numpy\", \"pandas\"],\n    [], // No micropip packages\n    filesToLoad,\n    \"./src/pyodide/worker/worker.js\"\n);\n\nawait Nagini.waitForReady(manager);\n\n// Use loaded modules\nconst result = await manager.executeAsync(\"analysis.py\", `\nfrom analytics.analytics import compute_statistics\nfrom analytics.utils import format_results\n\ndata = [1, 2, 3, 4, 5]\nstats = compute_statistics(data)\nformatted = format_results(stats)\nprint(formatted)\nmissive({\"statistics\": stats})\n`);\n</code></pre>"},{"location":"docs/#micropip-package-installation","title":"Micropip Package Installation","text":"<p>In addition to the standard Pyodide packages, Nagini supports installing packages from the Python Package Index (PyPI) using <code>micropip</code>. This feature is only available for the Pyodide backend.</p> <p><code>micropip</code> allows you to install pure Python packages or packages with wheel files that are compatible with the Pyodide environment.</p>"},{"location":"docs/#usage","title":"Usage","text":"<p>To install packages with <code>micropip</code>, pass an array of package names to the <code>micropipPackages</code> parameter of <code>Nagini.createManager</code>:</p> <pre><code>const manager = await Nagini.createManager(\n    'pyodide',\n    [], // No standard packages\n    [\"requests\", \"beautifulsoup4\"], // Install from PyPI\n    [],\n    \"./src/pyodide/worker/worker-dist.js\"\n);\n\nawait Nagini.waitForReady(manager);\n\nconst result = await manager.executeAsync(\"network_test.py\", `\nimport requests\n\ntry:\n    response = requests.get(\"https://api.github.com\")\n    print(f\"GitHub API Status: {response.status_code}\")\n    missive({\"status\": response.status_code})\nexcept Exception as e:\n    print(f\"Error: {e}\")\n    missive({\"error\": str(e)})\n`);\n\nconsole.log(result.stdout);\n// Expected output: GitHub API Status: 200\n</code></pre>"},{"location":"docs/#how-it-works","title":"How it Works","text":"<p>When <code>micropipPackages</code> are provided, Nagini instructs the Pyodide worker to: 1. Load the <code>micropip</code> package itself. 2. Use <code>micropip.install()</code> to download and install the specified packages from PyPI. 3. The worker maintains a cache of installed <code>micropip</code> packages to avoid re-installing them on subsequent executions.</p> <p>This process happens automatically during the manager's initialization phase.</p>"},{"location":"docs/#testing","title":"Testing","text":""},{"location":"docs/#test-suite-overview","title":"Test Suite Overview","text":"<p>Nagini includes 18 comprehensive test cases covering all major features:</p>"},{"location":"docs/#core-api-tests-nagini","title":"Core API Tests (Nagini)","text":"<ol> <li>Manager Creation - <code>Nagini.createManager()</code> with validation</li> <li>Initialization - <code>Nagini.waitForReady()</code> with timeout handling</li> <li>URL Execution - <code>Nagini.executeFromUrl()</code> with error handling</li> </ol>"},{"location":"docs/#manager-tests-pyodidemanager","title":"Manager Tests (PyodideManager)","text":"<ol> <li>Direct Execution - <code>executeAsync()</code> with result validation</li> <li>Namespace Functionality - Variable access in custom namespaces</li> <li>Namespace Isolation - Complete isolation between executions</li> <li>Execution History - Result tracking with timestamps</li> <li>Worker Access - Web worker instance validation</li> <li>Ready State - Initialization state tracking</li> <li>Package List - Installed package validation</li> <li>Files to Load - File loading configuration</li> <li>Init Path - Python initialization script path</li> <li>Worker Path - Web worker script path</li> <li>Input Handling - Queue system and stdout verification</li> <li>Matplotlib Integration - Figure capture and base64 encoding</li> <li>Micropip Package Installation - Verification of package installation from PyPI.</li> </ol>"},{"location":"docs/#manager-tests-brythonmanager","title":"Manager Tests (BrythonManager)","text":"<ol> <li>Simple Execution - <code>executeAsync()</code> basic stdout validation</li> </ol>"},{"location":"docs/#file-loading-tests-pyodidefileloader","title":"File Loading Tests (PyodideFileLoader)","text":"<ol> <li>Remote Integration - Remote file loading and Python imports</li> </ol>"},{"location":"docs/#running-tests","title":"Running Tests","text":"<pre><code># Start local server\npython -m http.server 8000\n\n# Open test interface\nopen http://localhost:8000/scenery/\n\n# Tests run automatically on page load\n# Results displayed in real-time with pass/fail indicators\n</code></pre>"},{"location":"docs/#test-structure","title":"Test Structure","text":"<p>Each test follows a consistent pattern:</p> <pre><code>static async test_name(manager) {\n    const testName = \"descriptive test name\";\n    logTestStart(\"Component\", testName);\n\n    try {\n        // Test implementation\n        const result = await manager.executeAsync(\"test.py\", `\n            # Python test code\n        `);\n\n        // Assertions\n        assert(result, \"Result should be returned\");\n        assertContains(result.stdout, \"expected output\");\n        assertEquals(result.missive.value, expectedValue);\n\n        logTestPass(testName);\n        return { result, testName };\n    } catch (error) {\n        logTestFail(testName, error);\n        throw error;\n    }\n}\n</code></pre>"},{"location":"docs/#test-coverage","title":"Test Coverage","text":"<ul> <li>API Coverage: All public methods and properties</li> <li>Error Handling: Timeout, invalid parameters, execution errors</li> <li>Data Types: Validation of inputs and outputs</li> <li>Integration: End-to-end workflows with real Python code</li> <li>Performance: Execution timing and memory usage</li> <li>Browser Support: Works across modern browsers</li> </ul>"},{"location":"docs/#development","title":"Development","text":""},{"location":"docs/#project-structure","title":"Project Structure","text":"<pre><code>pca-nagini/\n\u251c\u2500\u2500 src/                           # Core source code\n\u2502   \u251c\u2500\u2500 nagini.js                  # High-level API\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 validation.js          # Parameter validation utilities\n\u2502   \u2502   \u2514\u2500\u2500 createBlobWorker.js    # Cross-origin worker utilities\n\u2502   \u251c\u2500\u2500 brython/                   # Brython backend\n\u2502   \u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2502   \u251c\u2500\u2500 lib/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 brython.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 brython_stdlib.js\n\u2502   \u2502   \u251c\u2500\u2500 manager/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 manager.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 loader.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 executor.js\n\u2502   \u2502   \u2514\u2500\u2500 python/\n\u2502   \u2502       \u2514\u2500\u2500 turtle_min.py\n\u2502   \u2514\u2500\u2500 pyodide/\n\u2502       \u251c\u2500\u2500 manager/\n\u2502       \u2502   \u251c\u2500\u2500 manager.js         # Core PyodideManager class\n\u2502       \u2502   \u251c\u2500\u2500 manager-static-execution.js  # Execution logic\n\u2502       \u2502   \u251c\u2500\u2500 manager-input.js   # Input handling\n\u2502       \u2502   \u2514\u2500\u2500 manager-fs.js      # Filesystem operations\n\u2502       \u251c\u2500\u2500 worker/\n\u2502       \u2502   \u251c\u2500\u2500 worker.js          # Worker entry point (ES6 modules)\n\u2502       \u2502   \u251c\u2500\u2500 worker-config.js   # Configuration constants\n\u2502       \u2502   \u251c\u2500\u2500 worker-handlers.js # Message handlers\n\u2502       \u2502   \u251c\u2500\u2500 worker-execution.js # Execution logic\n\u2502       \u2502   \u251c\u2500\u2500 worker-input.js    # Input handling\n\u2502       \u2502   \u251c\u2500\u2500 worker-fs.js       # Filesystem operations\n\u2502       \u2502   \u251c\u2500\u2500 webpack.config.cjs # Webpack bundling configuration\n\u2502       \u2502   \u251c\u2500\u2500 package.json       # NPM dependencies and build scripts\n\u2502       \u2502   \u251c\u2500\u2500 package-lock.json  # Dependency lock file\n\u2502       \u2502   \u251c\u2500\u2500 worker-dist.js     # **Bundled worker output** (generated)\n\u2502       \u2502   \u251c\u2500\u2500 bundle-worker.py   # Python bundling script (alternative)\n\u2502       \u2502   \u251c\u2500\u2500 .gitignore         # Build artifacts exclusions\n\u2502       \u2502   \u251c\u2500\u2500 README.md          # Worker bundling documentation\n\u2502       \u2502   \u2514\u2500\u2500 node_modules/      # NPM dependencies (generated)\n\u2502       \u251c\u2500\u2500 file-loader/\n\u2502       \u2502   \u2514\u2500\u2500 file-loader.js     # Remote file loading\n\u2502       \u2514\u2500\u2500 python/\n\u2502           \u251c\u2500\u2500 pyodide_init.py    # Python initialization script\n\u2502           \u251c\u2500\u2500 capture_system.py  # Output capture system\n\u2502           \u251c\u2500\u2500 code_transformation.py # Code transformation utilities\n\u2502           \u2514\u2500\u2500 pyodide_utilities.py # Python helper functions\n\u251c\u2500\u2500 scenery/                       # Testing and demo\n\u2502   \u251c\u2500\u2500 app.js\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 interactive-functions.js\n\u2502   \u2514\u2500\u2500 tests/                     # Test modules\n\u2502       \u251c\u2500\u2500 brython-manager-tests.js\n\u2502       \u2514\u2500\u2500 ... (other test files)\n\u251c\u2500\u2500 experiments/                   # Experimental playgrounds\n\u2502   \u251c\u2500\u2500 brython/ (demo resources)\n\u2502   \u2514\u2500\u2500 xterm/                     # Xterm.js terminal integration\n\u2502       \u251c\u2500\u2500 index.html            # Main terminal interface\n\u2502       \u251c\u2500\u2500 app.js                # Terminal application logic\n\u2502       \u2514\u2500\u2500 README.md             # Xterm integration documentation\n\u251c\u2500\u2500 tests/                         # Flask integration examples\n\u2502   \u251c\u2500\u2500 flask-example.py          # Complete Flask app example\n\u2502   \u251c\u2500\u2500 flask-test.html           # Simple HTML test page\n\u2502   \u251c\u2500\u2500 DEPLOYMENT.md             # Two-port deployment guide\n\u2502   \u2514\u2500\u2500 README.md                 # Test documentation\n\u251c\u2500\u2500 hooks/                         # Git / editor hooks\n\u2502   \u251c\u2500\u2500 install-hooks.sh\n\u2502   \u251c\u2500\u2500 pre-commit\n\u2502   \u2514\u2500\u2500 validate_editorconfig.py\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 docs.md                   # This comprehensive documentation\n\u251c\u2500\u2500 README.md                     # Project overview\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 3RD-PARTY.md\n\u251c\u2500\u2500 serve.py                      # Static file server for development\n\u2514\u2500\u2500 todo.md\n</code></pre>"},{"location":"docs/#architecture-principles","title":"Architecture Principles","text":""},{"location":"docs/#separation-of-concerns","title":"Separation of Concerns","text":"<ul> <li>Nagini: High-level convenience API</li> <li>PyodideManager: Lifecycle and worker management</li> <li>PyodideManagerStaticExecutor: Pure execution logic</li> <li>Worker Components: Isolated execution environment</li> </ul>"},{"location":"docs/#modular-worker-design","title":"Modular Worker Design","text":"<ul> <li>Entry Point: Dynamic imports and state management</li> <li>Handlers: Business logic for different message types</li> <li>Configuration: Centralized constants and messages</li> </ul>"},{"location":"docs/#static-execution-pattern","title":"Static Execution Pattern","text":"<ul> <li>Core execution logic extracted to static methods</li> <li>Improves testability with pure functions</li> <li>Clear separation between state and behavior</li> </ul>"},{"location":"docs/#development-guidelines","title":"Development Guidelines","text":""},{"location":"docs/#constructor-validation","title":"Constructor Validation","text":"<pre><code>// Strict type validation - no defaults or coercion\nif (!Array.isArray(packages)) {\n    throw new Error(\"packages must be an array\");\n}\nif (typeof workerPath !== \"string\") {\n    throw new Error(\"workerPath must be a string\");\n}\n</code></pre>"},{"location":"docs/#error-handling","title":"Error Handling","text":"<pre><code>try {\n    const result = await manager.executeAsync(\"test.py\", code);\n    // Handle success\n} catch (error) {\n    console.error(\"Execution failed:\", error.message);\n    // Handle failure\n}\n</code></pre>"},{"location":"docs/#message-handler-pattern-core-architecture","title":"Message Handler Pattern (Core Architecture)","text":"<p>The Handler Replacement Pattern is a fundamental architectural technique that enables Promise-based APIs over web worker message passing. This pattern is essential for converting asynchronous message communication into synchronous-looking JavaScript code.</p> <p>The Problem: Web workers communicate via messages, not direct function calls. When we send a message to the worker, we get a response later via <code>handleMessage()</code>. But JavaScript functions expect immediate return values or Promises.</p> <p>Normal Flow: 1. User calls: <code>manager.executeAsync(\"test.py\", \"print('hello')\")</code> 2. Manager sends message to worker 3. Worker executes Python code 4. Worker sends result back 5. <code>handleMessage()</code> receives the result 6. But how do we get the result back to the original caller?</p> <p>The Solution - Handler Replacement: We temporarily \"hijack\" the <code>handleMessage</code> function to capture the specific result for the specific caller, then restore the original function.</p> <p>Step-by-Step Process: 1. Save Original Handler: <code>const originalHandler = this.getHandleMessage()</code> 2. Replace with Interceptor: Replace <code>handleMessage</code> with a custom function that:    - Still calls the original handler (for normal processing)    - BUT ALSO checks if this is the result we're waiting for    - If yes: resolve the Promise with the result    - Then restore the original <code>handleMessage</code> 3. Send Message: Send the message to the worker 4. Capture Result: When the result comes back, our custom handler catches it 5. Restore Handler: Original handler is restored for future calls</p> <p>Why This is Safe: JavaScript is single-threaded, so only one execution can happen at a time. No race conditions are possible - each call completes before the next starts.</p> <p>Implementation Example: <pre><code>// Core implementation of the handler replacement pattern\nstatic async executeAsync(worker, isReady, executionHistory, setHandleMessage, getHandleMessage, filename, code, namespace) {\n    return new Promise((resolve, reject) =&gt; {\n        // Add timeout to prevent hanging\n        const timeoutId = setTimeout(() =&gt; {\n            setHandleMessage(originalHandler);\n            reject(new Error(\"Execution timeout after 30 seconds\"));\n        }, 30000);\n\n        // Save original handler and replace with interceptor\n        const originalHandler = getHandleMessage();\n\n        setHandleMessage(function(data) {\n            try {\n                // Call original handler for normal processing\n                originalHandler.call(this, data);\n\n                // Check if this is the result we're waiting for\n                if (data.type === \"result\") {\n                    clearTimeout(timeoutId);\n                    const result = executionHistory[executionHistory.length - 1];\n                    resolve(result);\n                    // Restore original handler\n                    setHandleMessage(originalHandler);\n                } else if (data.type === \"error\") {\n                    clearTimeout(timeoutId);\n                    setHandleMessage(originalHandler);\n                    reject(new Error(`Execution error: ${data.message}`));\n                }\n            } catch (error) {\n                clearTimeout(timeoutId);\n                setHandleMessage(originalHandler);\n                reject(new Error(`Handler error: ${error.message}`));\n            }\n        });\n\n        // Send execution message to worker\n        worker.postMessage({\n            type: \"execute\",\n            filename,\n            code,\n            namespace\n        });\n    });\n}\n</code></pre></p> <p>Analogy: Like temporarily replacing your mailbox with a special one that: 1. Still puts mail in your house (original function) 2. But ALSO checks for a specific letter you're expecting 3. When that letter arrives, immediately gives it to you 4. Then puts your normal mailbox back</p> <p>Pattern Usage in Nagini: - PyodideManagerStaticExecutor.executeAsync(): Core execution with results - PyodideManagerFS._sendFSCommand(): Filesystem operations - PyodideManagerInput: Input handling (similar pattern)</p> <p>This pattern enables clean, Promise-based APIs while maintaining the performance benefits of web worker execution.</p>"},{"location":"docs/#xterm-terminal-integration","title":"Xterm Terminal Integration","text":"<p>Nagini includes an experimental xterm.js terminal integration that demonstrates how to create a full terminal interface for Python code execution in the browser.</p>"},{"location":"docs/#location-and-features","title":"Location and Features","text":"<p>The xterm integration is located in <code>experiments/xterm/</code> and provides:</p> <ul> <li>Real Terminal Interface: Full xterm.js terminal with cursor, colors, and keyboard navigation</li> <li>Interactive Python Execution: Execute Python code using Nagini's Pyodide backend</li> <li>Template System: Pre-built Python scripts ready to execute</li> <li>Command History: Navigate previous commands with arrow keys</li> <li>Matplotlib Integration: Automatic figure display above the terminal</li> <li>Professional Styling: VS Code-inspired dark theme</li> </ul>"},{"location":"docs/#available-templates","title":"Available Templates","text":"<ol> <li>hello_world - Simple hello world script with user input demonstration</li> <li>data_analysis - Basic data analysis using numpy with statistics and histogram plotting</li> <li>calculator - Interactive calculator supporting math operations and scientific functions</li> <li>plot_demo - Comprehensive matplotlib demonstration with multiple plot types</li> </ol>"},{"location":"docs/#usage-example","title":"Usage Example","text":"<pre><code># Start local server\npython -m http.server 8000\n\n# Open terminal interface\nhttp://localhost:8000/experiments/xterm/\n\n# Terminal commands\n$ help          # Show available commands\n$ templates     # List Python templates\n$ run hello_world   # Execute a template\n$ status        # Show system status\n$ clear         # Clear screen\n</code></pre>"},{"location":"docs/#technical-implementation","title":"Technical Implementation","text":"<p>The xterm integration demonstrates: - ES6 Module Integration: Proper import of Nagini as ES6 module - Terminal Event Handling: Keyboard input, command parsing, and history management - Python Code Execution: Seamless integration with Nagini's execution pipeline - Figure Display: Automatic matplotlib figure rendering in the browser - Error Handling: Proper display of Python errors and execution feedback</p> <p>This experiment showcases the potential for creating full-featured browser-based Python development environments using Nagini as the execution backend.</p>"},{"location":"docs/#worker-bundling-system","title":"Worker Bundling System","text":"<p>Nagini includes a comprehensive webpack-based bundling system to handle cross-origin deployment scenarios, particularly for Flask apps and other web frameworks.</p>"},{"location":"docs/#problem-solved","title":"Problem Solved","text":"<p>When creating web workers from blob URLs across different origins (e.g., loading Nagini from port 8010 while Flask runs on port 5001), ES6 dynamic imports fail due to CORS restrictions:</p> <pre><code>// This fails in cross-origin blob workers:\nimport { handleMessage } from './worker-handlers.js';  // CORS error\n</code></pre>"},{"location":"docs/#solution-two-worker-versions","title":"Solution: Two Worker Versions","text":"<p>1. Development Version (<code>worker.js</code>) - Uses ES6 imports for clean, modular development - Perfect for same-origin development - Easy debugging and hot reloading</p> <p>2. Production Version (<code>worker-dist.js</code>) - Single bundled file with all dependencies resolved - No ES6 imports - works in any blob worker context - Optimized with webpack + babel transpilation - ~64KB compressed bundle</p>"},{"location":"docs/#build-process","title":"Build Process","text":"<pre><code># Navigate to worker directory\ncd src/pyodide/worker\n\n# Install dependencies (first time only)\nnpm install\n\n# Build production bundle\nnpm run build                # Creates worker-dist.js (production)\nnpm run build-dev           # Creates worker-dist.js (development mode)\n</code></pre>"},{"location":"docs/#webpack-configuration","title":"Webpack Configuration","text":"<p>The bundling system uses a specialized webpack configuration optimized for web workers:</p> <pre><code>// webpack.config.cjs\nmodule.exports = {\n  mode: 'production',\n  entry: './worker.js',\n  output: {\n    filename: 'worker-dist.js',\n    globalObject: 'self',     // Important for web workers\n  },\n  target: 'webworker',        // Optimize for web worker environment\n  module: {\n    rules: [{\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: [['@babel/preset-env', {\n            targets: { browsers: ['last 2 versions'] }\n          }]]\n        }\n      }\n    }]\n  }\n};\n</code></pre>"},{"location":"docs/#usage-examples","title":"Usage Examples","text":"<p>Same-Origin Development: <pre><code>const manager = await Nagini.createManager(\n    'pyodide',\n    [\"numpy\"],\n    [], // No micropip packages\n    [],\n    \"./src/pyodide/worker/worker.js\"        // ES6 modules version\n);\n</code></pre></p> <p>Cross-Origin Production (Flask): <pre><code>// Direct bundled worker usage\nconst manager = await Nagini.createManager(\n    'pyodide',\n    [\"numpy\"],\n    [], // No micropip packages\n    [],\n    \"http://127.0.0.1:8010/src/pyodide/worker/worker-dist.js\"  // Bundled version\n);\n\n// Or with blob worker for maximum compatibility\nasync function createBlobWorkerUrl(workerPath) {\n    const response = await fetch(workerPath);\n    const workerCode = await response.text();\n    const blob = new Blob([workerCode], { type: 'application/javascript' });\n    return URL.createObjectURL(blob);\n}\n\nconst workerPath = \"http://127.0.0.1:8010/src/pyodide/worker/worker-dist.js\";\nconst blobWorkerUrl = await createBlobWorkerUrl(workerPath);\n\nconst manager = await Nagini.createManager(\n    'pyodide',\n    [\"numpy\"],\n    [], // No micropip packages\n    [],\n    blobWorkerUrl  // Blob URL works across any origin\n);\n</code></pre></p>"},{"location":"docs/#bundle-contents","title":"Bundle Contents","text":"<p>The bundled worker includes all necessary modules: - <code>worker.js</code> (entry point) - <code>worker-handlers.js</code> (message handling) - <code>worker-execution.js</code> (Python execution) - <code>worker-fs.js</code> (filesystem operations) - <code>worker-input.js</code> (input handling) - <code>worker-config.js</code> (configuration constants)</p>"},{"location":"docs/#deployment-benefits","title":"Deployment Benefits","text":"<ul> <li>Flask Integration: Seamless integration with Flask and other web frameworks</li> <li>CORS Compatibility: No cross-origin restrictions with blob workers</li> <li>CDN Distribution: Single file can be served from CDNs</li> <li>Performance: Optimized bundle with minimal overhead</li> <li>Browser Support: Works across all modern browsers</li> </ul>"},{"location":"docs/#licensing","title":"Licensing","text":"<p>Nagini is licensed under the GNU Affero General Public License v3.0 (AGPL-3.0).</p>"},{"location":"docs/#key-requirements","title":"Key Requirements:","text":"<ul> <li>Source Code Sharing: Any modifications must be shared under the same license</li> <li>Network Use: Users of network services must have access to source code</li> <li>Derivative Works: Must use compatible licenses</li> <li>Copyright Notices: Must be preserved</li> </ul>"},{"location":"docs/#what-this-means","title":"What This Means:","text":"<ul> <li>\u2705 Free to use for any purpose (personal, educational, commercial, research)</li> <li>\u2705 Modify and distribute with source code sharing</li> <li>\u2705 Commercial use allowed with copyleft compliance</li> <li>\u2705 Network services permitted with source availability</li> </ul> <p>For complete details, see the LICENSE file.</p>"},{"location":"docs/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docs/#common-issues","title":"Common Issues","text":"<p><code>TypeError: Failed to fetch dynamically imported module</code> - Cause: Cross-origin restrictions on dynamic imports in blob workers. - Solution: Use the bundled <code>worker-dist.js</code> instead of <code>worker.js</code>. See Worker Bundling System.</p> <p><code>Execution timeout after 30 seconds</code> - Cause: Python code is taking too long to execute, or Pyodide initialization is slow. - Solution:     1. Increase the timeout in <code>Nagini.waitForReady()</code>.     2. Optimize your Python code for performance.     3. Ensure a stable network connection for package loading.</p> <p><code>ModuleNotFoundError: No module named '...'</code> - Cause:     1. The required package was not included in the <code>packages</code> or <code>micropipPackages</code> array.     2. The package is not compatible with Pyodide.     3. The module is from a custom file that was not loaded correctly. - Solution:     1. Add the package to the <code>packages</code> or <code>micropipPackages</code> array during manager creation.     2. Check the Pyodide or PyPI documentation for package compatibility.     3. Verify the <code>filesToLoad</code> configuration for custom modules.</p> <p><code>input()</code> returns an empty string, or <code>ValueError: invalid literal for int() with base 10: ''</code> - Cause: This indicates a breakdown in the asynchronous input handling mechanism. The Python code is not correctly pausing to wait for user input and instead receives an empty string immediately. This is usually caused by an issue in <code>manager-input.js</code> where the <code>input_required</code> message from the worker is not handled correctly, failing to pull from the <code>inputQueue</code> or trigger the <code>inputCallback</code>. - Solution:     1. Ensure you are using the latest version of Nagini, as this was a known issue in older versions.     2. If developing locally, ensure <code>src/pyodide/manager/manager-input.js</code> correctly references <code>manager.inputState.inputQueue</code> and properly dequeues items. The interactive test in <code>scenery/index.html</code> is a good way to verify this functionality.     3. Verify that the worker bundle (<code>worker-dist.js</code>) is up-to-date by running <code>npm run build</code> in the worker directory.</p>"},{"location":"docs/#reporting-bugs","title":"Reporting Bugs","text":"<p>Please report any bugs or issues on our GitHub Issues page. Include the following details: - Browser and version - Operating system - Steps to reproduce the issue - Console logs and error messages - A minimal, reproducible example if possible</p> <p>We appreciate your contributions to making Nagini better! </p>"},{"location":"docs/#automated-release-validation","title":"Automated Release Validation","text":"<p>To ensure the stability of every release, Nagini uses a sophisticated, automated test harness that validates the entire application before any new version can be tagged. This system is a critical part of our quality assurance process.</p> <ul> <li>Selenium &amp; Chrome: A Selenium script (<code>scenery/run_tests.py</code>) runs a headless Chrome browser to execute the full test suite in a real-world environment.</li> <li>Failure Simulation: The test suite includes tests that are designed to fail (an assertion failure, or \"flop\", and a runtime error, or \"glitch\"). These tests are located in <code>scenery/tests/failure-tests.js</code>. They are crucial for ensuring that our error-handling and reporting systems are working correctly.</li> <li><code>pre-push</code> Git Hook: When a new tag is pushed (e.g., <code>git push origin v0.0.11</code>), a <code>pre-push</code> hook (<code>hooks/pre-push</code>) automatically runs the Selenium tests. It checks the JSON output in the <code>scenery/critics/</code> directory to ensure that only the expected \"flop\" and \"glitch\" tests have failed. If any other test fails, or if the failure tests unexpectedly pass, the push is aborted.</li> </ul> <p>This system guarantees that no broken code can ever be tagged for release.</p>"},{"location":"repo_reference/","title":"Repository Reference","text":"<p>This section provides a detailed file-by-file reference for the Nagini repository.</p> <ul> <li><code>nagini.js</code> - The main API entry point.</li> <li><code>utils/</code></li> <li><code>validation.js</code> - Centralized validation utilities.</li> <li><code>createBlobWorker.js</code> - Utilities for cross-origin workers.</li> <li><code>pyodide/</code></li> <li><code>manager/</code><ul> <li><code>manager.js</code> - The core Pyodide manager.</li> <li><code>manager-static-execution.js</code> - Static execution logic.</li> <li><code>manager-input.js</code> - Input handling.</li> <li><code>manager-fs.js</code> - Filesystem operations.</li> </ul> </li> <li><code>worker/</code><ul> <li><code>worker.js</code> - The main worker entry point.</li> <li><code>worker-handlers.js</code> - Worker message handlers.</li> <li><code>worker-execution.js</code> - Worker execution logic.</li> <li><code>worker-input.js</code> - Worker input handling.</li> <li><code>worker-fs.js</code> - Worker filesystem operations.</li> <li><code>worker-config.js</code> - Worker configuration.</li> </ul> </li> <li><code>file-loader/</code><ul> <li><code>file-loader.js</code> - Remote file loading.</li> </ul> </li> <li><code>python/</code><ul> <li><code>pyodide_init.py</code> - Pyodide Python initialization.</li> <li><code>capture_system.py</code> - Output capture system.</li> <li><code>code_transformation.py</code> - Code transformation for async input.</li> <li><code>pyodide_utilities.py</code> - Pyodide utility functions.</li> </ul> </li> <li><code>brython/</code></li> <li><code>manager/</code><ul> <li><code>manager.js</code> - The core Brython manager.</li> <li><code>loader.js</code> - Brython runtime loader.</li> <li><code>executor.js</code> - Brython code executor. </li> </ul> </li> </ul>"},{"location":"repo_reference/brython-executor/","title":"<code>brython/manager/executor.js</code> - Brython Executor","text":"<p>Location: <code>src/brython/manager/executor.js</code></p> <p>This file is responsible for the actual execution of Python code using the Brython engine.</p>"},{"location":"repo_reference/brython-executor/#function-executeasynccode-filename","title":"Function: <code>executeAsync(code, filename)</code>","text":"<ul> <li>Description: This function takes a string of Python code, wraps it in a boilerplate that redirects <code>stdout</code> and <code>stderr</code> and defines a <code>missive</code> function, and then executes it. It achieves this by creating a new <code>&lt;script type=\"text/python3\"&gt;</code> tag, adding the code to it, and appending it to the document. Brython then automatically discovers and runs the code.</li> <li>Parameters:<ul> <li><code>code</code> (string): The Python code to execute.</li> <li><code>filename</code> (string, default: <code>'script.py'</code>): A name for the execution.</li> </ul> </li> <li>Returns: A <code>Promise</code> that resolves with an object containing the <code>stdout</code>, <code>stderr</code>, <code>missive</code>, and execution <code>time</code>.</li> <li>Throws: <code>Error</code> if the Brython runtime is not initialized. </li> </ul>"},{"location":"repo_reference/brython-loader/","title":"<code>brython/manager/loader.js</code> - Brython Loader","text":"<p>Location: <code>src/brython/manager/loader.js</code></p> <p>This file is responsible for dynamically loading the Brython runtime into the browser.</p>"},{"location":"repo_reference/brython-loader/#function-loadbrythonoptions","title":"Function: <code>loadBrython(options)</code>","text":"<ul> <li>Description: This function injects the <code>brython.js</code> and <code>brython_stdlib.js</code> scripts into the document's <code>&lt;head&gt;</code>. It ensures that the scripts are loaded only once and then initializes the Brython runtime by calling <code>window.brython()</code>.</li> <li>Parameters:<ul> <li><code>options</code> (Object): An object that can contain the following properties:<ul> <li><code>brythonJsPath</code> (string): The path to the <code>brython.js</code> file.</li> <li><code>brythonStdlibPath</code> (string): The path to the <code>brython_stdlib.js</code> file.</li> </ul> </li> </ul> </li> <li>Returns: A <code>Promise</code> that resolves when the Brython runtime is loaded and initialized.</li> <li>Throws: <code>Error</code> if the script fails to load. </li> </ul>"},{"location":"repo_reference/brython-manager/","title":"<code>brython/manager/manager.js</code> - Brython Manager","text":"<p>Location: <code>src/brython/manager/manager.js</code></p> <p>This file contains the <code>BrythonManager</code> class, which provides a lightweight alternative to the <code>PyodideManager</code>. It executes Python code by transpiling it to JavaScript in the main browser thread.</p>"},{"location":"repo_reference/brython-manager/#class-brythonmanager","title":"Class: <code>BrythonManager</code>","text":""},{"location":"repo_reference/brython-manager/#constructorpackages-filestoload-initpath-workerpath-brythonoptions","title":"<code>constructor(packages, filesToLoad, initPath, workerPath, brythonOptions)</code>","text":"<ul> <li>Description: Creates a new <code>BrythonManager</code> instance. It accepts the same parameters as <code>PyodideManager</code> for API compatibility, but most are ignored.</li> <li><code>brythonOptions</code> (Object): An object containing paths to the <code>brython.js</code> and <code>brython_stdlib.js</code> files.</li> </ul>"},{"location":"repo_reference/brython-manager/#executeasyncfilename-code-namespace","title":"<code>executeAsync(filename, code, namespace)</code>","text":"<ul> <li>Description: Executes Python code by transpiling it to JavaScript. It returns a result object similar to <code>PyodideManager</code> for consistency.</li> <li>Parameters:<ul> <li><code>filename</code> (string): A name for the execution.</li> <li><code>code</code> (string): The Python code to execute.</li> <li><code>namespace</code> (Object, optional): This parameter is ignored in the Brython backend.</li> </ul> </li> <li>Returns: A <code>Promise</code> that resolves to an <code>ExecutionResult</code> object.</li> </ul>"},{"location":"repo_reference/brython-manager/#unsupported-methods","title":"Unsupported Methods","text":"<p>The following methods from the <code>PyodideManager</code> are not supported and will either throw an error or log a warning to the console: -   <code>fs()</code> -   <code>queueInput()</code> -   <code>provideInput()</code> -   <code>setInputCallback()</code> -   <code>isWaitingForInput()</code> -   <code>getCurrentPrompt()</code> </p>"},{"location":"repo_reference/capture-system/","title":"<code>pyodide/python/capture_system.py</code> - Output Capture System","text":"<p>Location: <code>src/pyodide/python/capture_system.py</code></p> <p>This file is responsible for capturing all outputs generated by the user's Python code. This includes standard output (<code>stdout</code>), standard error (<code>stderr</code>), Matplotlib figures, and a custom structured data channel called the \"missive\" system.</p>"},{"location":"repo_reference/capture-system/#core-functions","title":"Core Functions","text":""},{"location":"repo_reference/capture-system/#reset_captures","title":"<code>reset_captures()</code>","text":"<ul> <li>Description: This function is called before each code execution. It clears the <code>stdout</code> and <code>stderr</code> buffers, resets the missive state, and closes any open Matplotlib figures. It also redirects <code>sys.stdout</code> and <code>sys.stderr</code> to custom <code>CaptureStream</code> objects that write to in-memory buffers.</li> </ul>"},{"location":"repo_reference/capture-system/#get_stdout-and-get_stderr","title":"<code>get_stdout()</code> and <code>get_stderr()</code>","text":"<ul> <li>Description: These functions return the contents of the <code>stdout</code> and <code>stderr</code> buffers as strings.</li> </ul>"},{"location":"repo_reference/capture-system/#get_missive","title":"<code>get_missive()</code>","text":"<ul> <li>Description: Returns the data sent via the <code>missive</code> function as a JSON string.</li> </ul>"},{"location":"repo_reference/capture-system/#get_figures","title":"<code>get_figures()</code>","text":"<ul> <li>Description: This function finds any Matplotlib figures that have been created, saves each one to an in-memory buffer as a PNG image, and returns a list of base64-encoded strings representing the images.</li> </ul>"},{"location":"repo_reference/capture-system/#missivedata","title":"<code>missive(data)</code>","text":"<ul> <li>Description: This function is made globally available to the user's code. It allows the user to send a Python dictionary back to the main JavaScript thread as structured data. It can only be called once per execution.</li> <li>Parameters:<ul> <li><code>data</code> (dict): A Python dictionary to be sent to JavaScript.</li> </ul> </li> <li>Throws: <code>ValueError</code> if called more than once. </li> </ul>"},{"location":"repo_reference/code-transformation/","title":"<code>pyodide/python/code_transformation.py</code> - Code Transformation","text":"<p>Location: <code>src/pyodide/python/code_transformation.py</code></p> <p>This file is a key part of Nagini's non-blocking input system. It contains the logic for transforming user-provided Python code to support <code>async</code> <code>input()</code> calls.</p>"},{"location":"repo_reference/code-transformation/#core-functions","title":"Core Functions","text":""},{"location":"repo_reference/code-transformation/#transform_code_for_executioncode","title":"<code>transform_code_for_execution(code)</code>","text":"<ul> <li>Description: This is the main function called by the worker. It first checks if the user's code contains any <code>input()</code> calls. If it does, it transforms the code by calling <code>prepare_code_for_async_input</code> and then wrapping the entire script in an <code>async def</code> function. This allows the code to be run asynchronously, preventing it from blocking the main browser thread while waiting for user input. If no <code>input()</code> calls are found, the code is returned unmodified.</li> <li>Parameters:<ul> <li><code>code</code> (string): The user's Python code.</li> </ul> </li> <li>Returns: The transformed (or original) Python code as a string.</li> </ul>"},{"location":"repo_reference/code-transformation/#prepare_code_for_async_inputcode","title":"<code>prepare_code_for_async_input(code)</code>","text":"<ul> <li>Description: This function iterates through the user's code line by line and replaces every call to <code>input()</code> with <code>await input()</code>. This is necessary because the built-in <code>input</code> function is replaced with an <code>async</code> version in <code>worker-input.js</code>.</li> <li>Parameters:<ul> <li><code>code</code> (string): The user's Python code.</li> </ul> </li> <li>Returns: The Python code with <code>await</code> added to all <code>input()</code> calls. </li> </ul>"},{"location":"repo_reference/createBlobWorker/","title":"<code>utils/createBlobWorker.js</code> - Blob Worker Utility","text":"<p>Location: <code>src/utils/createBlobWorker.js</code></p> <p>This file provides utilities for creating and managing web workers from blob URLs. This is a crucial technique for enabling cross-origin worker execution, which is a common requirement in web applications where the main application and the worker scripts are served from different origins.</p>"},{"location":"repo_reference/createBlobWorker/#functions","title":"Functions","text":""},{"location":"repo_reference/createBlobWorker/#createblobworkerurlworkerurl","title":"<code>createBlobWorkerUrl(workerUrl)</code>","text":"<ul> <li>Description: Fetches a worker script from a URL and creates a blob URL from its content.</li> <li><code>workerUrl</code> (string): The URL of the bundled worker script (<code>worker-dist.js</code>).</li> <li>Returns: A promise that resolves to a blob URL (string).</li> <li>Throws: <code>Error</code> if the worker script cannot be fetched.</li> </ul>"},{"location":"repo_reference/createBlobWorker/#createblobworkerworkerurl","title":"<code>createBlobWorker(workerUrl)</code>","text":"<ul> <li>Description: Creates a <code>Worker</code> instance using the blob URL pattern.</li> <li><code>workerUrl</code> (string): The URL of the bundled worker script (<code>worker-dist.js</code>).</li> <li>Returns: A promise that resolves to a <code>Worker</code> instance.</li> <li>Throws: <code>Error</code> if the worker creation fails.</li> </ul>"},{"location":"repo_reference/createBlobWorker/#revokebloburlbloburl","title":"<code>revokeBlobUrl(blobUrl)</code>","text":"<ul> <li>Description: Revokes a blob URL to release memory. This is an important cleanup step to prevent memory leaks.</li> <li><code>blobUrl</code> (string): The blob URL to revoke. </li> </ul>"},{"location":"repo_reference/file-loader/","title":"<code>pyodide/file-loader/file-loader.js</code> - File Loader","text":"<p>Location: <code>src/pyodide/file-loader/file-loader.js</code></p> <p>This file contains the <code>PyodideFileLoader</code> class, which is responsible for fetching remote files and loading them into the Pyodide virtual filesystem.</p>"},{"location":"repo_reference/file-loader/#class-pyodidefileloader","title":"Class: <code>PyodideFileLoader</code>","text":""},{"location":"repo_reference/file-loader/#constructorfilestoload","title":"<code>constructor(filesToLoad)</code>","text":"<ul> <li>Description: Creates a new <code>PyodideFileLoader</code> instance.</li> <li>Parameters:<ul> <li><code>filesToLoad</code> (Array"},{"location":"repo_reference/file-loader/#loadfilespyodide-options","title":"pyodide/file-loader/file-loader.js","text":""},{"location":"repo_reference/manager-fs/","title":"<code>pyodide/manager/manager-fs.js</code> - Filesystem Operations","text":"<p>Location: <code>src/pyodide/manager/manager-fs.js</code></p> <p>This file contains the <code>PyodideManagerFS</code> class, which provides a high-level interface for interacting with the virtual filesystem within the Pyodide web worker. It is a static class that operates on a <code>PyodideManager</code> instance.</p>"},{"location":"repo_reference/manager-fs/#class-pyodidemanagerfs","title":"Class: <code>PyodideManagerFS</code>","text":""},{"location":"repo_reference/manager-fs/#fsmanager-operation-params","title":"<code>fs(manager, operation, params)</code>","text":"<ul> <li>Description: The main public method for all filesystem operations. It acts as a proxy, sending a command to the worker and returning the result.</li> <li>Parameters:<ul> <li><code>manager</code> (PyodideManager): The manager instance.</li> <li><code>operation</code> (string): The operation to perform (e.g., <code>'writeFile'</code>, <code>'readFile'</code>).</li> <li><code>params</code> (Object): Parameters for the operation, such as <code>path</code> and <code>content</code>.</li> </ul> </li> <li>Returns: A <code>Promise</code> that resolves with the result of the operation.</li> </ul>"},{"location":"repo_reference/manager-fs/#convenience-methods","title":"Convenience Methods","text":"<p>The following methods are convenient wrappers around the main <code>fs</code> method for common operations:</p> <ul> <li><code>writeFile(manager, path, content)</code>: Writes a file to the filesystem.</li> <li><code>readFile(manager, path)</code>: Reads the content of a file.</li> <li><code>mkdir(manager, path)</code>: Creates a new directory.</li> <li><code>exists(manager, path)</code>: Checks if a file or directory exists.</li> <li><code>listdir(manager, path)</code>: Lists the contents of a directory. </li> </ul>"},{"location":"repo_reference/manager-input/","title":"<code>pyodide/manager/manager-input.js</code> - Input Handling","text":"<p>Location: <code>src/pyodide/manager/manager-input.js</code></p> <p>This file contains the <code>PyodideManagerInput</code> class, which encapsulates all logic related to handling Python's <code>input()</code> function. It is a static class that operates on a <code>PyodideManager</code> instance.</p>"},{"location":"repo_reference/manager-input/#class-pyodidemanagerinput","title":"Class: <code>PyodideManagerInput</code>","text":""},{"location":"repo_reference/manager-input/#initializeinputstatemanager","title":"<code>initializeInputState(manager)</code>","text":"<ul> <li>Description: Initializes the <code>inputState</code> object on a <code>PyodideManager</code> instance. This sets up the necessary properties for managing input, such as the input queue and callback.</li> </ul>"},{"location":"repo_reference/manager-input/#provideinputmanager-input","title":"<code>provideInput(manager, input)</code>","text":"<ul> <li>Description: Sends an input string to the worker, which is then passed to the waiting Python <code>input()</code> call.</li> <li>Parameters:<ul> <li><code>manager</code> (PyodideManager): The manager instance.</li> <li><code>input</code> (string): The input value to provide.</li> </ul> </li> </ul>"},{"location":"repo_reference/manager-input/#queueinputmanager-input","title":"<code>queueInput(manager, input)</code>","text":"<ul> <li>Description: Adds an input string to a queue. The queued inputs are automatically sent one by one as Python's <code>input()</code> function is called.</li> <li>Parameters:<ul> <li><code>manager</code> (PyodideManager): The manager instance.</li> <li><code>input</code> (string): The input value to queue.</li> </ul> </li> </ul>"},{"location":"repo_reference/manager-input/#setinputcallbackmanager-callback","title":"<code>setInputCallback(manager, callback)</code>","text":"<ul> <li>Description: Registers a callback function that will be invoked whenever Python requests input and the input queue is empty.</li> <li>Parameters:<ul> <li><code>manager</code> (PyodideManager): The manager instance.</li> <li><code>callback</code> (function): The callback to execute. It receives the <code>prompt</code> string as an argument.</li> </ul> </li> </ul>"},{"location":"repo_reference/manager-input/#iswaitingforinputmanager","title":"<code>isWaitingForInput(manager)</code>","text":"<ul> <li>Description: Checks if the Pyodide environment is currently paused and waiting for an <code>input()</code> call to be resolved.</li> <li>Returns: <code>true</code> if waiting for input, otherwise <code>false</code>.</li> </ul>"},{"location":"repo_reference/manager-input/#getcurrentpromptmanager","title":"<code>getCurrentPrompt(manager)</code>","text":"<ul> <li>Description: Returns the prompt string provided by the current Python <code>input()</code> call (e.g., <code>input(\"Your name: \")</code>).</li> <li>Returns: The prompt string. </li> </ul>"},{"location":"repo_reference/manager-static-execution/","title":"<code>pyodide/manager/manager-static-execution.js</code> - Static Executor","text":"<p>Location: <code>src/pyodide/manager/manager-static-execution.js</code></p> <p>This file contains the <code>PyodideManagerStaticExecutor</code> class, which holds the pure, static logic for executing Python code. This separation of concerns makes the execution logic more testable and decoupled from the stateful <code>PyodideManager</code>.</p>"},{"location":"repo_reference/manager-static-execution/#class-pyodidemanagerstaticexecutor","title":"Class: <code>PyodideManagerStaticExecutor</code>","text":"<p>This class only contains static methods and is not meant to be instantiated.</p>"},{"location":"repo_reference/manager-static-execution/#executefileworker-isready-filename-code-namespace","title":"<code>executeFile(worker, isReady, filename, code, namespace)</code>","text":"<ul> <li>Description: Dispatches a \"fire-and-forget\" execution request to the worker. It sends a <code>postMessage</code> to the worker but does not wait for a response.</li> <li>Parameters:<ul> <li><code>worker</code> (Worker): The web worker instance.</li> <li><code>isReady</code> (boolean): <code>true</code> if the Pyodide environment is ready.</li> <li><code>filename</code> (string): A name for the execution, for tracking purposes.</li> <li><code>code</code> (string): The Python code to execute.</li> <li><code>namespace</code> (Object, optional): An object to use as the global namespace.</li> </ul> </li> <li>Throws: <code>Error</code> if any of the parameters are invalid.</li> </ul>"},{"location":"repo_reference/manager-static-execution/#executeasyncworker-isready-executionhistory-sethandlemessage-gethandlemessage-filename-code-namespace","title":"<code>executeAsync(worker, isReady, executionHistory, setHandleMessage, getHandleMessage, filename, code, namespace)</code>","text":"<ul> <li>Description: Executes Python code asynchronously and returns a promise that resolves with the execution result. This method implements the \"Handler Replacement Pattern\" to manage the asynchronous communication with the worker.</li> <li>Parameters:<ul> <li><code>worker</code> (Worker): The web worker instance.</li> <li><code>isReady</code> (boolean): <code>true</code> if the Pyodide environment is ready.</li> <li><code>executionHistory</code> (Array): A reference to the execution history array for logging the result.</li> <li><code>setHandleMessage</code> (function): A function to set the worker's <code>onmessage</code> handler.</li> <li><code>getHandleMessage</code> (function): A function to get the current <code>onmessage</code> handler.</li> <li><code>filename</code> (string): A name for the execution.</li> <li><code>code</code> (string): The Python code to execute.</li> <li><code>namespace</code> (Object, optional): An object to use as the global namespace.</li> </ul> </li> <li>Returns: A <code>Promise</code> that resolves with the <code>ExecutionResult</code> object.</li> <li>Throws: <code>Error</code> if the manager is not ready or if the execution times out. </li> </ul>"},{"location":"repo_reference/manager/","title":"<code>pyodide/manager/manager.js</code> - Pyodide Manager","text":"<p>Location: <code>src/pyodide/manager/manager.js</code></p> <p>This file contains the <code>PyodideManager</code> class, which is the core component for managing the Pyodide execution environment. It handles the creation and communication with the Pyodide web worker.</p>"},{"location":"repo_reference/manager/#class-pyodidemanager","title":"Class: <code>PyodideManager</code>","text":""},{"location":"repo_reference/manager/#constructorpackages-micropippackages-filestoload-workerpath","title":"<code>constructor(packages, micropipPackages, filesToLoad, workerPath)</code>","text":"<ul> <li>Description: Creates a new <code>PyodideManager</code> instance. It performs strict validation on all parameters and initializes the web worker.</li> <li>Parameters:<ul> <li><code>packages</code> (Array): A list of standard Python packages to install. <li><code>micropipPackages</code> (Array): A list of packages to install via <code>micropip</code>. <li><code>filesToLoad</code> (Array"},{"location":"repo_reference/manager/#executeasyncfilename-code-namespace","title":"pyodide/manager/manager.js","text":""},{"location":"repo_reference/manager/#executefilefilename-code-namespace","title":"pyodide/manager/manager.js","text":""},{"location":"repo_reference/manager/#fsoperation-params","title":"pyodide/manager/manager.js","text":""},{"location":"repo_reference/manager/#input-handling","title":"pyodide/manager/manager.js","text":""},{"location":"repo_reference/manager/#destroy","title":"pyodide/manager/manager.js","text":""},{"location":"repo_reference/manager/#properties","title":"pyodide/manager/manager.js","text":""},{"location":"repo_reference/nagini/","title":"<code>nagini.js</code> - Main API","text":"<p>Location: <code>src/nagini.js</code></p> <p>This file is the main entry point for the Nagini library. It provides a high-level API for creating and managing Python execution environments in the browser, supporting multiple backends like Pyodide and Brython.</p>"},{"location":"repo_reference/nagini/#core-object-nagini","title":"Core Object: <code>Nagini</code>","text":"<p>The <code>Nagini</code> object is the primary export of this file and contains several methods for interacting with the library.</p>"},{"location":"repo_reference/nagini/#naginicreatemanagerbackend-packages-micropippackages-filestoload-workerpath-options","title":"<code>Nagini.createManager(backend, packages, micropipPackages, filesToLoad, workerPath, options)</code>","text":"<p>This asynchronous function creates and initializes a backend manager.</p> <ul> <li><code>backend</code> (string, default: <code>'pyodide'</code>): The desired Python backend. Can be <code>'pyodide'</code> or <code>'brython'</code>.</li> <li><code>packages</code> (Array): A list of standard Python packages to install (e.g., <code>['numpy', 'pandas']</code>). <li><code>micropipPackages</code> (Array): A list of packages to install via <code>micropip</code>. <li><code>filesToLoad</code> (Array"},{"location":"repo_reference/nagini/#naginiwaitforreadymanager-timeout","title":"nagini.js","text":""},{"location":"repo_reference/nagini/#naginiexecutefromurlurl-manager-namespace","title":"nagini.js","text":""},{"location":"repo_reference/nagini/#naginigetsupportedbackends","title":"nagini.js","text":""},{"location":"repo_reference/nagini/#naginiisbackendsupportedbackend","title":"nagini.js","text":""},{"location":"repo_reference/pyodide-init/","title":"<code>pyodide/python/pyodide_init.py</code> - Pyodide Initialization","text":"<p>Location: <code>src/pyodide/python/pyodide_init.py</code></p> <p>This script is the main entry point for the Python environment within the Pyodide worker. It is responsible for importing all necessary Python modules and making their functions available in the global namespace so they can be called from JavaScript.</p>"},{"location":"repo_reference/pyodide-init/#core-logic","title":"Core Logic","text":"<p>This script performs the following actions:</p> <ol> <li>Imports Modules: It imports all the necessary functions from the other Python files in the same directory:<ul> <li><code>capture_system.py</code></li> <li><code>code_transformation.py</code></li> <li><code>pyodide_utilities.py</code></li> </ul> </li> <li>Exposes Functions: It attaches these functions to the <code>builtins</code> module, which makes them globally accessible in the Python environment. This allows JavaScript to call them via <code>pyodide.runPython()</code>.</li> <li>Initializes Capture System: It calls <code>reset_captures()</code> to ensure that the <code>stdout</code> and <code>stderr</code> streams are redirected and ready to capture output from the very beginning. </li> </ol>"},{"location":"repo_reference/pyodide-utilities/","title":"<code>pyodide/python/pyodide_utilities.py</code> - Pyodide Utilities","text":"<p>Location: <code>src/pyodide/python/pyodide_utilities.py</code></p> <p>This file contains miscellaneous utility functions for configuring the Pyodide environment.</p>"},{"location":"repo_reference/pyodide-utilities/#core-functions","title":"Core Functions","text":""},{"location":"repo_reference/pyodide-utilities/#setup_matplotlib","title":"<code>setup_matplotlib()</code>","text":"<ul> <li>Description: This function is called after the necessary packages (including Matplotlib) have been loaded. It configures Matplotlib for use in a non-interactive Web Worker environment.</li> <li>Key Actions:<ol> <li>Sets Backend to <code>agg</code>: It forces Matplotlib to use the non-interactive <code>agg</code> backend, which is essential for rendering plots in a worker without DOM access.</li> <li>Disables Font Caching: It disables Matplotlib's font caching to prevent slowdowns and potential issues in the testing environment.</li> <li>Overrides <code>plt.show()</code>: It replaces the standard <code>plt.show()</code> function with a no-op, as plots are captured automatically by the <code>capture_system.py</code> module. </li> </ol> </li> </ul>"},{"location":"repo_reference/validation/","title":"<code>utils/validation.js</code> - Validation Utilities","text":"<p>Location: <code>src/utils/validation.js</code></p> <p>This file provides a centralized set of static methods for validating parameters and data structures used throughout the Nagini library.</p>"},{"location":"repo_reference/validation/#class-validationutils","title":"Class: <code>ValidationUtils</code>","text":"<p>This class contains static methods for various validation tasks.</p>"},{"location":"repo_reference/validation/#validatearrayvalue-paramname-component","title":"<code>validateArray(value, paramName, component)</code>","text":"<ul> <li>Description: Checks if a value is an array.</li> <li>Throws: <code>Error</code> if the value is not an array.</li> </ul>"},{"location":"repo_reference/validation/#validatestringvalue-paramname-component-allowempty","title":"<code>validateString(value, paramName, component, allowEmpty)</code>","text":"<ul> <li>Description: Checks if a value is a string.</li> <li><code>allowEmpty</code> (boolean, default: <code>false</code>): If <code>false</code>, the string cannot be empty.</li> <li>Throws: <code>Error</code> if the value is not a string or if it's empty when not allowed.</li> </ul>"},{"location":"repo_reference/validation/#validatebooleanvalue-paramname-component","title":"<code>validateBoolean(value, paramName, component)</code>","text":"<ul> <li>Description: Checks if a value is a boolean.</li> <li>Throws: <code>Error</code> if the value is not a boolean.</li> </ul>"},{"location":"repo_reference/validation/#validatefunctionvalue-paramname-component","title":"<code>validateFunction(value, paramName, component)</code>","text":"<ul> <li>Description: Checks if a value is a function.</li> <li>Throws: <code>Error</code> if the value is not a function.</li> </ul>"},{"location":"repo_reference/validation/#validateobjectvalue-paramname-component","title":"<code>validateObject(value, paramName, component)</code>","text":"<ul> <li>Description: Checks if a value is a plain object (not <code>null</code> or an array).</li> <li>Throws: <code>Error</code> if the value is not an object.</li> </ul>"},{"location":"repo_reference/validation/#validateworkerworker-component","title":"<code>validateWorker(worker, component)</code>","text":"<ul> <li>Description: Validates a <code>Worker</code> instance by checking for the <code>postMessage</code> method.</li> <li>Throws: <code>Error</code> if the worker is not a valid instance.</li> </ul>"},{"location":"repo_reference/validation/#validatepyodidepyodide-component","title":"<code>validatePyodide(pyodide, component)</code>","text":"<ul> <li>Description: Validates a Pyodide instance by checking for the <code>FS</code> object and <code>runPython</code> method.</li> <li>Throws: <code>Error</code> if the instance is not valid.</li> </ul>"},{"location":"repo_reference/validation/#validatefilestoloadfilestoload-component","title":"<code>validateFilesToLoad(filesToLoad, component)</code>","text":"<ul> <li>Description: Validates an array of file objects, ensuring each has a <code>url</code> and <code>path</code>.</li> <li>Throws: <code>Error</code> if the array or any of its objects are invalid.</li> </ul>"},{"location":"repo_reference/validation/#validatepackagespackages-component","title":"<code>validatePackages(packages, component)</code>","text":"<ul> <li>Description: Validates an array of package names, ensuring each is a non-empty string.</li> <li>Throws: <code>Error</code> if the array or any of its elements are invalid.</li> </ul>"},{"location":"repo_reference/validation/#validatenamespacenamespace-component","title":"<code>validateNamespace(namespace, component)</code>","text":"<ul> <li>Description: Validates an optional <code>namespace</code> object.</li> <li>Throws: <code>Error</code> if the namespace is defined but is not a valid object.</li> </ul>"},{"location":"repo_reference/validation/#validateexecutionparamsfilename-code-namespace-component","title":"<code>validateExecutionParams(filename, code, namespace, component)</code>","text":"<ul> <li>Description: Validates all parameters for an execution call.</li> <li>Throws: <code>Error</code> if any parameter is invalid.</li> </ul>"},{"location":"repo_reference/validation/#checkdangerouspatternscode","title":"<code>checkDangerousPatterns(code)</code>","text":"<ul> <li>Description: Scans Python code for potentially dangerous patterns (e.g., <code>import os</code>).</li> <li>Returns: An array of strings describing any dangerous patterns found.</li> </ul>"},{"location":"repo_reference/validation/#validatebackendbackend-component","title":"<code>validateBackend(backend, component)</code>","text":"<ul> <li>Description: Validates the backend name (must be <code>'pyodide'</code> or <code>'brython'</code>).</li> <li>Throws: <code>Error</code> if the backend name is not valid. </li> </ul>"},{"location":"repo_reference/worker-config/","title":"<code>pyodide/worker/worker-config.js</code> - Worker Configuration","text":"<p>Location: <code>src/pyodide/worker/worker-config.js</code></p> <p>This file centralizes all configuration constants and messages for the Pyodide web worker. This improves maintainability by providing a single source of truth for these values.</p>"},{"location":"repo_reference/worker-config/#core-object-pyodide_worker_config","title":"Core Object: <code>PYODIDE_WORKER_CONFIG</code>","text":""},{"location":"repo_reference/worker-config/#pyodide_cdn","title":"<code>PYODIDE_CDN</code>","text":"<ul> <li>Description: The URL for the Pyodide CDN, from which the Pyodide runtime is loaded. The version number is part of this URL.</li> <li>Type: <code>string</code></li> </ul>"},{"location":"repo_reference/worker-config/#messages","title":"<code>MESSAGES</code>","text":"<ul> <li>Description: An object containing a categorized collection of all error, warning, and informational messages used by the worker. This ensures consistent and easily updatable messaging.</li> <li>Type: <code>Object</code> </li> </ul>"},{"location":"repo_reference/worker-execution/","title":"<code>pyodide/worker/worker-execution.js</code> - Worker Execution Logic","text":"<p>Location: <code>src/pyodide/worker/worker-execution.js</code></p> <p>This file contains the core logic for executing Python code within the Pyodide web worker.</p>"},{"location":"repo_reference/worker-execution/#core-functions","title":"Core Functions","text":""},{"location":"repo_reference/worker-execution/#handleexecutedata-workerstate","title":"<code>handleExecute(data, workerState)</code>","text":"<ul> <li>Description: The main handler for <code>'execute'</code> messages. It takes the Python code and an optional namespace from the message, executes it using Pyodide, and then captures and posts the results back to the main thread.</li> <li>Parameters:<ul> <li><code>data</code> (Object): The message data, containing <code>code</code>, <code>filename</code>, and an optional <code>namespace</code>.</li> <li><code>workerState</code> (Object): The current state of the worker.</li> </ul> </li> </ul>"},{"location":"repo_reference/worker-execution/#transformcodeforexecutioncode-workerstate","title":"<code>transformCodeForExecution(code, workerState)</code>","text":"<ul> <li>Description: This function checks if the user's code contains <code>input()</code>. If it does, it calls a Python-based transformation function (<code>transform_code_for_execution</code> in <code>code_transformation.py</code>) to wrap the code in an <code>async</code> function. This is a key part of the non-blocking input system.</li> <li>Parameters:<ul> <li><code>code</code> (string): The Python code to transform.</li> <li><code>workerState</code> (Object): The current state of the worker.</li> </ul> </li> <li>Returns: An object containing the (potentially transformed) <code>code</code> and a boolean <code>needsAsync</code>.</li> </ul>"},{"location":"repo_reference/worker-execution/#captureoutputspyodide-iserrorcase","title":"<code>captureOutputs(pyodide, isErrorCase)</code>","text":"<ul> <li>Description: After execution, this function calls Python helper functions (<code>get_stdout</code>, <code>get_stderr</code>, etc. in <code>capture_system.py</code>) to retrieve the standard output, standard error, missive data, and any Matplotlib figures that were generated.</li> <li>Parameters:<ul> <li><code>pyodide</code> (PyodideAPI): The Pyodide instance.</li> <li><code>isErrorCase</code> (boolean): If <code>true</code>, it avoids trying to capture the missive, as it might not be valid in an error state.</li> </ul> </li> <li>Returns: An object containing the captured <code>stdout</code>, <code>stderr</code>, <code>missive</code>, and <code>figures</code>. </li> </ul>"},{"location":"repo_reference/worker-fs/","title":"<code>pyodide/worker/worker-fs.js</code> - Worker Filesystem Operations","text":"<p>Location: <code>src/pyodide/worker/worker-fs.js</code></p> <p>This file contains the logic for handling filesystem operations and package loading within the Pyodide web worker.</p>"},{"location":"repo_reference/worker-fs/#core-functions","title":"Core Functions","text":""},{"location":"repo_reference/worker-fs/#handlefsoperationdata-workerstate","title":"<code>handleFSOperation(data, workerState)</code>","text":"<ul> <li>Description: The main handler for <code>'fs_operation'</code> messages. It calls <code>executeFS</code> to perform the requested operation and then posts the result or an error back to the main thread.</li> <li>Parameters:<ul> <li><code>data</code> (Object): The message data, containing the <code>operation</code> and its <code>params</code>.</li> <li><code>workerState</code> (Object): The current state of the worker.</li> </ul> </li> </ul>"},{"location":"repo_reference/worker-fs/#executefsdata-pyodide","title":"<code>executeFS(data, pyodide)</code>","text":"<ul> <li>Description: This function contains the actual logic for interacting with Pyodide's virtual filesystem (<code>pyodide.FS</code>). It supports <code>writeFile</code>, <code>readFile</code>, <code>mkdir</code>, <code>exists</code>, and <code>listdir</code>.</li> <li>Parameters:<ul> <li><code>data</code> (Object): The message data for the FS operation.</li> <li><code>pyodide</code> (PyodideAPI): The Pyodide instance.</li> </ul> </li> <li>Returns: An object containing the result of the operation.</li> <li>Throws: <code>Error</code> if the requested operation is not supported.</li> </ul>"},{"location":"repo_reference/worker-fs/#loadpackagespackages-workerstate","title":"<code>loadPackages(packages, workerState)</code>","text":"<ul> <li>Description: Loads a list of standard Pyodide packages. It includes \"smart loading\" logic to prevent re-installing packages that are already present in the environment.</li> <li>Parameters:<ul> <li><code>packages</code> (Array): An array of package names to load. <li><code>workerState</code> (Object): The current state of the worker. </li>"},{"location":"repo_reference/worker-handlers/","title":"<code>pyodide/worker/worker-handlers.js</code> - Worker Message Handlers","text":"<p>Location: <code>src/pyodide/worker/worker-handlers.js</code></p> <p>This file contains the core logic for handling messages sent to the Pyodide web worker. It acts as a dispatcher, routing incoming messages to the appropriate handler functions.</p>"},{"location":"repo_reference/worker-handlers/#core-functions","title":"Core Functions","text":""},{"location":"repo_reference/worker-handlers/#handlemessagee-workerstate","title":"<code>handleMessage(e, workerState)</code>","text":"<ul> <li>Description: The main message dispatcher. It receives an event <code>e</code> from the worker's <code>onmessage</code> handler and routes it to the correct handler based on the <code>data.type</code> property.</li> <li>Parameters:<ul> <li><code>e</code> (MessageEvent): The event object from the <code>onmessage</code> handler.</li> <li><code>workerState</code> (Object): The current state of the worker.</li> </ul> </li> </ul>"},{"location":"repo_reference/worker-handlers/#handleinitdata-workerstate","title":"<code>handleInit(data, workerState)</code>","text":"<ul> <li>Description: Initializes the Pyodide environment. This function is called when the worker receives a message of type <code>'init'</code>. It loads the Pyodide runtime, installs specified packages (both standard and <code>micropip</code>), and preloads any files into the virtual filesystem.</li> <li>Parameters:<ul> <li><code>data</code> (Object): The message data, containing <code>packages</code>, <code>micropipPackages</code>, and <code>filesToLoad</code>.</li> <li><code>workerState</code> (Object): The current state of the worker.</li> </ul> </li> </ul>"},{"location":"repo_reference/worker-handlers/#other-handlers","title":"Other Handlers","text":"<p>This file also imports and re-exports handlers from other modules, including:</p> <ul> <li><code>handleExecute</code> from <code>./worker-execution.js</code></li> <li><code>handleFSOperation</code> from <code>./worker-fs.js</code></li> <li><code>handleInputResponse</code> from <code>./worker-input.js</code></li> <li><code>setupInputHandling</code> from <code>./worker-input.js</code> </li> </ul>"},{"location":"repo_reference/worker-input/","title":"<code>pyodide/worker/worker-input.js</code> - Worker Input Handling","text":"<p>Location: <code>src/pyodide/worker/worker-input.js</code></p> <p>This file contains the logic for handling Python's <code>input()</code> function within the Pyodide web worker.</p>"},{"location":"repo_reference/worker-input/#core-functions","title":"Core Functions","text":""},{"location":"repo_reference/worker-input/#setupinputhandlingpyodide","title":"<code>setupInputHandling(pyodide)</code>","text":"<ul> <li>Description: This function sets up the necessary infrastructure for handling <code>input()</code>. It creates a <code>requestInput</code> function in the worker's global scope and then runs a Python script to replace the built-in <code>input</code> with an async version that calls <code>requestInput</code>.</li> <li><code>requestInput(prompt)</code>: When the Python <code>input()</code> is called, it triggers <code>requestInput</code>, which sends an <code>'input_required'</code> message to the main thread and then waits for a promise to be resolved.</li> <li>Parameters:<ul> <li><code>pyodide</code> (PyodideAPI): The Pyodide instance.</li> </ul> </li> </ul>"},{"location":"repo_reference/worker-input/#handleinputresponsedata-workerstate","title":"<code>handleInputResponse(data, workerState)</code>","text":"<ul> <li>Description: This function is called when the worker receives a message of type <code>'input_response'</code> from the main thread. It takes the input value from the message and uses it to resolve the pending promise created by <code>requestInput</code>, which unpauses the Python execution.</li> <li>Parameters:<ul> <li><code>data</code> (Object): The message data, containing the <code>input</code> string.</li> <li><code>workerState</code> (Object): The current state of the worker. </li> </ul> </li> </ul>"},{"location":"repo_reference/worker/","title":"<code>pyodide/worker/worker.js</code> - Worker Entry Point","text":"<p>Location: <code>src/pyodide/worker/worker.js</code></p> <p>This file is the main entry point for the Pyodide web worker. It is responsible for initializing the worker's state and handling incoming messages from the main thread.</p>"},{"location":"repo_reference/worker/#core-logic","title":"Core Logic","text":""},{"location":"repo_reference/worker/#workerstate","title":"<code>workerState</code>","text":"<ul> <li>Description: An object that holds the state of the worker, including:<ul> <li><code>pyodide</code>: The Pyodide instance (once loaded).</li> <li><code>isInitialized</code>: A boolean flag indicating if Pyodide is ready.</li> <li><code>packagesLoaded</code>: A <code>Set</code> to track which standard packages have been loaded.</li> <li><code>micropipPackagesLoaded</code>: A <code>Set</code> to track which <code>micropip</code> packages have been loaded.</li> </ul> </li> </ul>"},{"location":"repo_reference/worker/#selfonmessage","title":"<code>self.onmessage</code>","text":"<ul> <li>Description: The main message handler for the worker. It receives all messages from the main thread and delegates them to the <code>handleMessage</code> function from <code>worker-handlers.js</code>.</li> <li>Error Handling: It includes a <code>try...catch</code> block to handle any errors that occur during message processing and sends an error message back to the main thread. </li> </ul>"}]}