[
  {
    "className": "Nagini",
    "testName": "createManager(packages, filesToLoad, pyodideInitPath, workerPath)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:01:57.981Z"
  },
  {
    "className": "Nagini",
    "testName": "waitForReady(manager)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:03.351Z"
  },
  {
    "className": "Nagini",
    "testName": "executeFromUrl(url, manager)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.795Z"
  },
  {
    "className": "Nagini",
    "testName": "getSupportedBackends()",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.795Z"
  },
  {
    "className": "Nagini",
    "testName": "isBackendSupported(backend)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.796Z"
  },
  {
    "className": "PyodideManager",
    "testName": "executeAsync(filename, code)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.798Z"
  },
  {
    "className": "PyodideManager",
    "testName": "executeAsync(filename, code, namespace)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.800Z"
  },
  {
    "className": "PyodideManager",
    "testName": "executeAsync(filename, code, namespace)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.803Z"
  },
  {
    "className": "PyodideManager",
    "testName": "executionHistory",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.803Z"
  },
  {
    "className": "PyodideManager",
    "testName": "worker",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.803Z"
  },
  {
    "className": "PyodideManager",
    "testName": "isReady",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.804Z"
  },
  {
    "className": "PyodideManager",
    "testName": "packages",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.804Z"
  },
  {
    "className": "PyodideManager",
    "testName": "filesToLoad",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.804Z"
  },
  {
    "className": "PyodideManager",
    "testName": "pyodideInitPath",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.804Z"
  },
  {
    "className": "PyodideManager",
    "testName": "workerPath",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.804Z"
  },
  {
    "className": "PyodideManager",
    "testName": "executeAsync(filename, code)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.806Z"
  },
  {
    "className": "PyodideManager",
    "testName": "executeAsync(filename, code)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.998Z"
  },
  {
    "className": "PyodideManager",
    "testName": "fs(operation, params)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:04.999Z"
  },
  {
    "className": "PyodideFileLoader",
    "testName": "loadFiles(pyodide, filesToLoad)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.211Z"
  },
  {
    "className": "PyodideFileLoader",
    "testName": "retry logic and file operations",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.213Z"
  },
  {
    "className": "PyodideFileLoader",
    "testName": "error handling",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.216Z"
  },
  {
    "className": "PyodideIntegration",
    "testName": "testComplexInputData()",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.232Z"
  },
  {
    "className": "PyodideIntegration",
    "testName": "testDataVisualizationWorkflow()",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.459Z"
  },
  {
    "className": "PyodideIntegration",
    "testName": "testFileSystemAndImportWorkflow()",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.463Z"
  },
  {
    "className": "PyodideIntegration",
    "testName": "testMixedExecutionScenarios()",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.468Z"
  },
  {
    "className": "PyodideIntegration",
    "testName": "testAdvancedMatplotlibWorkflow()",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.854Z"
  },
  {
    "className": "PyodideIntegration",
    "testName": "testMicropipPackageInstallation()",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.906Z"
  },
  {
    "className": "PyodideIntegration",
    "testName": "testAntlr4AndSympyInteraction()",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:05.909Z"
  },
  {
    "className": "BrythonManager",
    "testName": "executeAsync(filename, code)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:06.051Z"
  },
  {
    "className": "ValidationUtils",
    "testName": "validateArray(array, componentName)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:06.052Z"
  },
  {
    "className": "ValidationUtils",
    "testName": "validateString(str, componentName)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:06.052Z"
  },
  {
    "className": "ValidationUtils",
    "testName": "validateBackend(backend, componentName)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:06.052Z"
  },
  {
    "className": "ValidationUtils",
    "testName": "checkDangerousPatterns(code)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:06.053Z"
  },
  {
    "className": "TestUtils",
    "testName": "assert(condition, message)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:06.053Z"
  },
  {
    "className": "TestUtils",
    "testName": "assertEquals(expected, actual, message)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:06.053Z"
  },
  {
    "className": "TestUtils",
    "testName": "assertContains(haystack, needle, message)",
    "status": "pass",
    "error": null,
    "main_critic": "wrapp",
    "timestamp": "2025-08-01T18:02:06.054Z"
  },
  {
    "className": "FailureTests",
    "testName": "testFlop()",
    "status": "fail",
    "error": "Error: ASSERTION FAILED: ASSERTION FAILED: 1 + 1 should be 3 (intentionally wrong)\n  Expected: undefined\n  Actual: 3",
    "main_critic": "flop",
    "timestamp": "2025-08-01T18:02:06.056Z"
  },
  {
    "className": "FailureTests",
    "testName": "testGlitch()",
    "status": "fail",
    "error": "Error: Python execution error: Unknown execution error",
    "main_critic": "glitch",
    "timestamp": "2025-08-01T18:02:06.059Z"
  }
]